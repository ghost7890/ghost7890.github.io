<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>西加加先生&#39;Blog</title>
  
  <subtitle>努力诚可贵，坚持价更高</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mrleecn.cn/"/>
  <updated>2019-06-22T02:57:29.608Z</updated>
  <id>https://mrleecn.cn/</id>
  
  <author>
    <name>西加加先生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>win10 1809 安装MongoDB4 流程及遇到的错误</title>
    <link href="https://mrleecn.cn/2019/06/16/setupMongoDB/"/>
    <id>https://mrleecn.cn/2019/06/16/setupMongoDB/</id>
    <published>2019-06-16T01:55:15.000Z</published>
    <updated>2019-06-22T02:57:29.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-下载安装MongoDB，下载地址"><a href="#1-下载安装MongoDB，下载地址" class="headerlink" title="1. 下载安装MongoDB，下载地址"></a>1. 下载安装MongoDB，<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">下载地址</a></h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/LlGO36leIc0B.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/roteXBh6i3h2.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/En6YoGEQl8nC.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/jN5kD7e6iBA7.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190616/TOsLVURykuns.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><p>此处先忽略，问题后面解决。</p><p>到此，MongoDB算是安装完成了。</p><h2 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2. 修改配置"></a>2. 修改配置</h2><p>下面这是安装完成的目录结构：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/v9zP5wjGkVrs.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><h3 id="1-指定存放数据日志的目录"><a href="#1-指定存放数据日志的目录" class="headerlink" title="1. 指定存放数据日志的目录"></a>1. 指定存放数据日志的目录</h3><p>可以采用上图中的data、log分别存储数据和日志。此处我选择自己指定目录。</p><p><strong>数据目录： D:\MongoDB\data\db（需要自己建立）</strong></p><p><strong>日志文件：D:\MongoDB\log\mongo.log</strong></p><h3 id="2-启动MongoDB"><a href="#2-启动MongoDB" class="headerlink" title="2. 启动MongoDB"></a>2. 启动MongoDB</h3><p>以管理员身份进入到<code>D:\MongoDB\bin\</code>目录，启动MongoDB：<code>.\mongod --dbpath D:\MongoDB\data\db</code>，然后在浏览器中输入<code>127.0.0.1:27017</code>查看状态。出现下图表示MongoDB启动成功。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://prwhphxqa.bkt.clouddn.com/blog/20190615/kp8qgOQXoylD.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><h3 id="3-配置本地Windows服务"><a href="#3-配置本地Windows服务" class="headerlink" title="3. 配置本地Windows服务"></a>3. 配置本地Windows服务</h3><ol><li><strong>修改<code>D:\MongoDB\bin\mongod.cfg</code>文件</strong>（推荐使用Notepad编辑）</li></ol><p>需要修改的地方有：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/YuB5cgdrlPDy.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><ol start="2"><li><strong>开启MongoDB服务</strong></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/hpumPzwIPavc.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><p>在服务中找到MongoDB</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/QDKiES0QKfBM.png" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><p>右键<strong>启动该服务</strong>。</p><h2 id="3-开机自启"><a href="#3-开机自启" class="headerlink" title="3. 开机自启"></a>3. 开机自启</h2><p>还是启动管理员shell，输入<code>net start MongoDB</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/yu6KCgRWrM4d.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><h2 id="4、常见问题及解决方法"><a href="#4、常见问题及解决方法" class="headerlink" title="4、常见问题及解决方法"></a>4、常见问题及解决方法</h2><h3 id="1、使用net-start-MongoDB命令报错——服务没有响应控制功能"><a href="#1、使用net-start-MongoDB命令报错——服务没有响应控制功能" class="headerlink" title="1、使用net start MongoDB命令报错——服务没有响应控制功能"></a>1、使用net start MongoDB命令报错——服务没有响应控制功能</h3><h4 id="问题原因：MongoDB服务没启动，配置文件错误"><a href="#问题原因：MongoDB服务没启动，配置文件错误" class="headerlink" title="问题原因：MongoDB服务没启动，配置文件错误"></a>问题原因：MongoDB服务没启动，配置文件错误</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/QDKiES0QKfBM.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><p>右键查看属性</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/OBgaTBuD0aCr.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><p>我们可以看到MongoDB默认的配置文件<code>D:\MongoDB\bin\mongod.cfg</code>，打开配置文件，<strong>注释掉最后一行的mp:</strong>，重启启动服务即可解决问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190615/YuB5cgdrlPDy.png?imageslim" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-下载安装MongoDB，下载地址&quot;&gt;&lt;a href=&quot;#1-下载安装MongoDB，下载地址&quot; class=&quot;headerlink&quot; title=&quot;1. 下载安装MongoDB，下载地址&quot;&gt;&lt;/a&gt;1. 下载安装MongoDB，&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="软件安装" scheme="https://mrleecn.cn/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
      <category term="MongoDB" scheme="https://mrleecn.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>字典与集合</title>
    <link href="https://mrleecn.cn/2019/06/01/dictandset/"/>
    <id>https://mrleecn.cn/2019/06/01/dictandset/</id>
    <published>2019-06-01T01:57:55.000Z</published>
    <updated>2019-06-01T02:20:38.697Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为极客时间 Python核心技术与实战 专栏的学习笔记</p></blockquote><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>在 Python3.7+，字典被确定为有序（注意：在 3.6 中，字典有序是一个 implementation detail，在 3.7 才正式成为语言特性，因此 3.6 中无法 100% 确保其有序性），而 3.6 之前是无序的，其长度大小可变，元素可以任意地删减和改变。</p><p>相比列表和元组，字典性能更优，可以在常数时间复杂度<strong>O(1)</strong>内完成查找、添加、删除操作。</p><h3 id="常用创建方法"><a href="#常用创建方法" class="headerlink" title="常用创建方法"></a>常用创建方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = &#123;<span class="string">'name'</span>: <span class="string">'Json'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = dict( &#123;<span class="string">'name'</span>: <span class="string">'Json'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d3 = dict([(<span class="string">'name'</span>, <span class="string">'Json'</span>),(<span class="string">'age'</span>, <span class="number">20</span>),(<span class="string">'gender'</span>,<span class="string">'male'</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d4 = dict(name=<span class="string">'Json'</span>, age=<span class="number">20</span>, gender=<span class="string">'male'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 == d2 == d3 == d4</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>使用<code>dict[key]</code>格式索引，如果不存在，会抛出<code>KeyError</code>异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">'name'</span>]</span><br><span class="line"><span class="string">'Json'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">'location'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'location'</span></span><br></pre></td></tr></table></figure><p>使用<code>get(key, default)</code>方法不会抛出异常，此外当该键不存在时，可以<strong>指定返回的默认值</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.get(<span class="string">'name'</span>)</span><br><span class="line"><span class="string">'Json'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.get(<span class="string">'location'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.get(<span class="string">'location'</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><p>判断某元素是否是字典的键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'name'</span> <span class="keyword">in</span> d1<span class="comment"># 同d1.keys()等价</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'name'</span> <span class="keyword">in</span> d1.keys()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Json'</span> <span class="keyword">in</span> d1</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Json'</span> <span class="keyword">in</span> d1.values()</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'name'</span>: <span class="string">'jason'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'gender'</span>] = <span class="string">'male'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'jason'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">'gender'</span>)</span><br><span class="line"><span class="string">'male'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'jason'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><strong>根据键排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'b'</span>: <span class="number">1</span>, <span class="string">'v'</span>: <span class="number">20</span>, <span class="string">'a'</span>: <span class="number">17</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_sorted_by_key = sorted(d.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_sorted_by_key</span><br><span class="line">[(<span class="string">'a'</span>, <span class="number">17</span>), (<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'v'</span>, <span class="number">20</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'b'</span>: <span class="number">1</span>, <span class="string">'v'</span>: <span class="number">20</span>, <span class="string">'a'</span>: <span class="number">17</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>根据值排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_sorted_by_value = sorted(d.items(), key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_sorted_by_value</span><br><span class="line">[(<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">17</span>), (<span class="string">'v'</span>, <span class="number">20</span>)]</span><br></pre></td></tr></table></figure><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>举例：有1000万件产品，产品信息包括：产品ID、价格。现在需求是：给定某件产品的ID，找出其价格：</p><p><strong>1.用列表来存储数据</strong></p><p>存储结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">products = [</span><br><span class="line">    (<span class="number">143121312</span>, <span class="number">100</span>), </span><br><span class="line">    (<span class="number">432314553</span>, <span class="number">30</span>),</span><br><span class="line">    (<span class="number">32421912367</span>, <span class="number">150</span>) </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>那么查找需要遍历整个列表，时间复杂度为<strong>O(n)</strong>。即使先对列表排序，然后二分查找，也会需要<strong>O(logn)</strong>的时间复杂度，并且排序还需要<strong>O(nlogn)</strong>的时间。</p><p><strong>2. 用字典存储数据</strong></p><p>存储结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">products = &#123;</span><br><span class="line"><span class="string">'143121312'</span>: <span class="number">100</span>,</span><br><span class="line"><span class="string">'432314553'</span>: <span class="number">30</span>,</span><br><span class="line"><span class="string">'32421912367'</span>: <span class="number">150</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为字典内部结构是一张哈希表，所以可以在<strong>O(1)</strong>的时间复杂度内完成查找。</p><p><strong>3. 效率对比</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_product_price_list</span><span class="params">(products, product_id)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> id, price <span class="keyword">in</span> products:</span><br><span class="line">        <span class="keyword">if</span> id == product_id:</span><br><span class="line">            <span class="keyword">return</span> price</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_product_price_dict</span><span class="params">(products, product_id)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> id <span class="keyword">in</span> products.keys():</span><br><span class="line">        <span class="keyword">if</span> id == product_id:</span><br><span class="line">            <span class="keyword">return</span> products_dict[id]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">r = numpy.random.randint(<span class="number">0</span>,<span class="number">10000000</span>,<span class="number">10000000</span>)       <span class="comment"># 生成10000000个随机数</span></span><br><span class="line">id = [str(x) <span class="keyword">for</span> x <span class="keyword">in</span> r]</span><br><span class="line">price = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">20000000</span>, <span class="number">30000000</span>)]</span><br><span class="line"></span><br><span class="line">products_list = list(zip(id, price))</span><br><span class="line">products_dict = dict(zip(id, price))</span><br><span class="line"><span class="comment"># 添加新元素</span></span><br><span class="line">products_list.append((<span class="string">'111111111'</span>, <span class="number">300</span>))<span class="comment"># 追加到列表末尾</span></span><br><span class="line">products_dict[<span class="string">'111111111'</span>] = <span class="number">300</span></span><br><span class="line"></span><br><span class="line">start_using_dict = time.perf_counter()</span><br><span class="line">find_product_price_dict(products_dict, <span class="string">'111111111'</span>)</span><br><span class="line">end_using_dict = time.perf_counter()</span><br><span class="line">print(<span class="string">'time elapse using dict: &#123;&#125;'</span>.format(end_using_dict - start_using_dict))</span><br><span class="line"></span><br><span class="line">start_using_list = time.perf_counter()</span><br><span class="line">find_product_price_list(products_dict, <span class="string">'111111111'</span>)</span><br><span class="line">end_using_list = time.perf_counter()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'time elapse using list: &#123;&#125;'</span>.format(end_using_list - start_using_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===========运行结果============</span></span><br><span class="line">time elapse using dict: <span class="number">0.1983588489999999</span></span><br><span class="line">time elapse using list: <span class="number">0.41368435999999953</span></span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>而集合和字典基本相同，唯一的区别，就是集合没有键和值的配对，是一系列无序的、唯一的元素组合。</p><h3 id="常用创建方法-1"><a href="#常用创建方法-1" class="headerlink" title="常用创建方法"></a>常用创建方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 == s2</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h3><p><strong>集合并不支持索引操作，因为集合本质上是一个哈希表，和列表不一样</strong>。</p><p>进行如下操作，Python会抛出<code>TypeError</code>异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1[<span class="number">0</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'set'</span> object <span class="keyword">is</span> <span class="keyword">not</span> subscriptable</span><br></pre></td></tr></table></figure><p>只能判断某元素是否在集合中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">in</span> s1</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> <span class="keyword">in</span> s1</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="添加-1"><a href="#添加-1" class="headerlink" title="添加"></a>添加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>注意：由于集合是无序的，所以<strong>无法确定<code>pop()</code>方法会删除哪个元素</strong>，所以谨慎使用。一般删除操作采用<code>remove()</code>即可。</p><h3 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s  = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">546</span>,<span class="number">34</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(s)</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">34</span>, <span class="number">546</span>]</span><br></pre></td></tr></table></figure><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><p>常用集合运算</p><table><thead><tr><th style="text-align:left"><strong>语法</strong></th><th style="text-align:left"><strong>操作</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left">set(list1) \</td><td style="text-align:left">set(list2)</td><td style="text-align:left">union</td><td>包含 list1 和 list2 所有数据的新集合</td></tr><tr><td style="text-align:left">set(list1) &amp; set(list2)</td><td style="text-align:left">intersection</td><td style="text-align:left">包含 list1 和 list2 中共同元素的新集合</td></tr><tr><td style="text-align:left">set(list1) - set(list2)</td><td style="text-align:left">difference</td><td style="text-align:left">在 list1 中出现但不在 list2 中出现的元素的集合</td></tr></tbody></table><h3 id="性能分析-1"><a href="#性能分析-1" class="headerlink" title="性能分析"></a>性能分析</h3><p>还是以上面那个例子为例，现在要求计算出有多少种价格。为了节省时间，我们把产品数量降低到10万。</p><h4 id="查找效率"><a href="#查找效率" class="headerlink" title="查找效率"></a>查找效率</h4><p><strong>1. 用列表存储数据</strong></p><p>需要两层循环。那么，在最差情况下，需要 <strong>O(n^2)</strong> 的时间复杂度。</p><p><strong>2. 用集合存储数据</strong></p><p>由于集合是高度优化的哈希表，里面元素不能重复，并且其添加和查找操作只需 O(1) 的复杂度，那么，总的时间复杂度就只有 <strong>O(n)</strong>。</p><p><strong>3. 效率对比</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_unique_price_set</span><span class="params">(products)</span>:</span></span><br><span class="line">    unique_price_set = set()</span><br><span class="line">    <span class="keyword">for</span> _, price <span class="keyword">in</span> products:</span><br><span class="line">        unique_price_set.add(price)</span><br><span class="line">    <span class="keyword">return</span> len(unique_price_set)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_unique_price_list</span><span class="params">(products)</span>:</span></span><br><span class="line">    unique_price_list = []</span><br><span class="line">    <span class="keyword">for</span> _, price <span class="keyword">in</span> products: <span class="comment"># A</span></span><br><span class="line">        <span class="keyword">if</span> price <span class="keyword">not</span> <span class="keyword">in</span> unique_price_list: <span class="comment">#B</span></span><br><span class="line">            unique_price_list.append(price)</span><br><span class="line">    <span class="keyword">return</span> len(unique_price_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = numpy.random.randint(<span class="number">0</span>,<span class="number">1000000</span>,<span class="number">100000</span>)       <span class="comment"># 生成100000个随机数</span></span><br><span class="line">id = [str(x) <span class="keyword">for</span> x <span class="keyword">in</span> r]</span><br><span class="line">price = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">200000</span>, <span class="number">300000</span>)]</span><br><span class="line"></span><br><span class="line">products = list(zip(id, price))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_using_set = time.perf_counter()</span><br><span class="line">find_unique_price_set(products)</span><br><span class="line">end_using_set = time.perf_counter()</span><br><span class="line">print(<span class="string">'time elapse using set: &#123;&#125;'</span>.format(end_using_set - start_using_set))</span><br><span class="line"></span><br><span class="line">start_using_list = time.perf_counter()</span><br><span class="line">find_unique_price_list(products)</span><br><span class="line">end_using_list = time.perf_counter()</span><br><span class="line">print(<span class="string">'time elapse using list: &#123;&#125;'</span>.format(end_using_list - start_using_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===========运行结果============</span></span><br><span class="line">time elapse using set: <span class="number">0.00985934799999999</span></span><br><span class="line">time elapse using list: <span class="number">65.528253501</span></span><br></pre></td></tr></table></figure><p>可以看出，仅10万数据，差距就已经很明显了。</p><h4 id="交集、并集、差集运算"><a href="#交集、并集、差集运算" class="headerlink" title="交集、并集、差集运算"></a>交集、并集、差集运算</h4><p>以求交集为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">list_a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">34</span>, <span class="number">53</span>, <span class="number">42</span>, <span class="number">44</span>]</span><br><span class="line">list_b = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">23</span>]</span><br><span class="line"></span><br><span class="line">intersection = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表做交集</span></span><br><span class="line">start_using_list = time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> list_a:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> list_b:</span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            intersection.append(a)</span><br><span class="line">end_using_list = time.perf_counter()</span><br><span class="line"></span><br><span class="line">print(intersection)</span><br><span class="line">print(<span class="string">'time: &#123;&#125;'</span>.format(end_using_list - start_using_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合做交集</span></span><br><span class="line">start_using_list = time.perf_counter()</span><br><span class="line">intersection = list(set(list_a) &amp; set(list_b))</span><br><span class="line">end_using_list = time.perf_counter()</span><br><span class="line"></span><br><span class="line">print(intersection)</span><br><span class="line">print(<span class="string">'time: &#123;&#125;'</span>.format(end_using_list - start_using_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===========运行结果============</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br><span class="line">time: <span class="number">9.622000000000797e-06</span></span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">time: <span class="number">4.169000000001782e-06</span></span><br></pre></td></tr></table></figure><p>因为篇幅有限。字典和集合的工作原理，请看下篇博客。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为极客时间 Python核心技术与实战 专栏的学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;/a&gt;字典&lt;/h2&gt;&lt;p&gt;在 Pyth
      
    
    </summary>
    
    
      <category term="Python" scheme="https://mrleecn.cn/tags/Python/"/>
    
      <category term="极客时间" scheme="https://mrleecn.cn/tags/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>对Python中列表及元组运行机制的理解</title>
    <link href="https://mrleecn.cn/2019/05/30/listandtuple/"/>
    <id>https://mrleecn.cn/2019/05/30/listandtuple/</id>
    <published>2019-05-30T13:03:17.000Z</published>
    <updated>2019-06-01T01:59:00.913Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为极客时间 Python核心技术与实战 专栏的学习笔记</p></blockquote><h1 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h1><ul><li><strong>Python 中的列表和元组都支持负数索引</strong></li><li><strong>列表和元组都支持切片操作</strong></li><li>列表和元组都<strong>可以随意嵌套</strong></li><li>两者也可以通过 list() 和 tuple() 函数相互转换：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list((1, 2, 3))</span><br><span class="line">[1, 2, 3]</span><br><span class="line"></span><br><span class="line">tuple([1, 2, 3])</span><br><span class="line">(1, 2, 3)</span><br></pre></td></tr></table></figure><h2 id="列表和元组常用的内置函数："><a href="#列表和元组常用的内置函数：" class="headerlink" title="列表和元组常用的内置函数："></a>列表和元组常用的内置函数：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">l = [3, 2, 3, 7, 8, 1]</span><br><span class="line">l.count(3) </span><br><span class="line">2</span><br><span class="line">l.index(7)</span><br><span class="line">3</span><br><span class="line">l.reverse()</span><br><span class="line">l</span><br><span class="line">[1, 8, 7, 3, 2, 3]</span><br><span class="line">l.sort()</span><br><span class="line">l</span><br><span class="line">[1, 2, 3, 3, 7, 8]</span><br><span class="line"></span><br><span class="line">tup = (3, 2, 3, 7, 8, 1)</span><br><span class="line">tup.count(3)</span><br><span class="line">2</span><br><span class="line">tup.index(7)</span><br><span class="line">3</span><br><span class="line">list(reversed(tup))</span><br><span class="line">[1, 8, 7, 3, 2, 3]</span><br><span class="line">sorted(tup)</span><br><span class="line">[1, 2, 3, 3, 7, 8]</span><br></pre></td></tr></table></figure><p><strong>解释如下：</strong></p><ul><li><p><strong>count(item)</strong> </p><p>表示统计列表 / 元组中 item 出现的次数。</p></li><li><p><strong>index(item)</strong> </p><p>表示返回列表 / 元组中 item 第一次出现的索引。</p></li><li><p><strong>list.reverse()</strong> 和 <strong>list.sort()</strong> </p><p>分别表示<strong>原地</strong>倒转列表和排序（注意，元组没有内置的这两个函数)。</p></li><li><p><strong>reversed()</strong> 和 <strong>sorted()</strong> </p><p>同样表示对列表 / 元组进行倒转和排序，但是会<strong>返回</strong>一个倒转后或者排好序的新的列表 / 元组。</p></li></ul><h1 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h1><ul><li><strong>列表是动态的</strong>，长度大小不固定，可以随意地增加、删减或者改变元素（mutable）。</li><li><strong>而元组是静态的</strong>，长度大小固定，无法增加删减或者改变（immutable）。</li></ul><p><strong>不能给元组增删元素</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tup = (1, 2, 3, 4)</span><br><span class="line">tup[3] = 40</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &apos;tuple&apos; object does not support item assignment</span><br></pre></td></tr></table></figure><p>如果需要对已有元组进行<strong>“改变”</strong>，就必须<strong>开辟新的内存空间</strong>，创建新元组。</p><p><strong>代码示例如下</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tup = (1, 2, 3, 4)</span><br><span class="line">new_tup = tup + (5, ) # 创建新的元组 new_tup，并依次填充原元组的值</span><br><span class="line">new _tup</span><br><span class="line">(1, 2, 3, 4, 5)</span><br><span class="line"></span><br><span class="line">l = [1, 2, 3, 4]</span><br><span class="line">l.append(5) # 添加元素 5 到原列表的末尾</span><br><span class="line">l</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><h2 id="列表和元组存储方式的差异"><a href="#列表和元组存储方式的差异" class="headerlink" title="列表和元组存储方式的差异"></a>列表和元组存储方式的差异</h2><h3 id="1-存储差异"><a href="#1-存储差异" class="headerlink" title="1. 存储差异"></a><strong>1. 存储差异</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; l = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; l.__sizeof__()</span><br><span class="line">64</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; tup = (1, 2, 3)</span><br><span class="line">&gt;&gt;&gt; tup.__sizeof__()</span><br><span class="line">48</span><br></pre></td></tr></table></figure><p>可以看到，对列表和元组，我们放置了相同的元素，但是元组的存储空间，却比列表要少 16 字节。这是为什么呢？</p><p>事实上，由于列表是动态的，所以它需要存储指针，来指向对应的元素（上述例子中，对于 int 型，8 字节）。另外，由于列表可变，所以需要额外存储已经分配的长度大小（8 字节），这样才可以实时追踪列表空间的使用情况，当空间不足时，及时分配额外空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l.__sizeof__()// 空列表的存储空间为 <span class="number">40</span> 字节</span><br><span class="line"><span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = ()// 空元组的存储空间为 <span class="number">24</span> 字节</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.__sizeof__()</span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure><p>继续在列表中添加元素，观察列表内存空间的变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">l.append(1)</span><br><span class="line">l.__sizeof__() </span><br><span class="line">72 // 加入了元素 1 之后，列表为其分配了可以存储 4 个元素的空间 (72 - 40)/8 = 4</span><br><span class="line">l.append(2) </span><br><span class="line">l.__sizeof__()</span><br><span class="line">72 // 由于之前分配了空间，所以加入元素 2，列表空间不变</span><br><span class="line">l.append(3)</span><br><span class="line">l.__sizeof__() </span><br><span class="line">72 // 同上</span><br><span class="line">l.append(4)</span><br><span class="line">l.__sizeof__() </span><br><span class="line">72 // 同上</span><br><span class="line">l.append(5)</span><br><span class="line">l.__sizeof__() </span><br><span class="line">104 // 加入元素 5 之后，列表的空间不足，所以又额外分配了可以存储 4 个元素的空间</span><br></pre></td></tr></table></figure><p>上面的例子，大概描述了列表空间分配的过程。我们可以看到，<strong>为了减小每次增加 / 删减操作时空间分配的开销，Python 每次分配空间时都会额外多分配一些，</strong>这样的机制（over-allocating）<strong>保证了其操作的高效性：增加 / 删除的时间复杂度均为 O(1)。</strong></p><p>但是对于元组，情况就不同了。<strong>元组长度大小固定，元素不可变，所以存储空间固定</strong>。</p><p>在数据量非常庞大时，列表和元组之间存储空间上的差距差别会非常明显，所以选择合适的数据结构很关键。</p><h3 id="2-性能差异"><a href="#2-性能差异" class="headerlink" title="2. 性能差异"></a>2. 性能差异</h3><p>通过上面的例子，我们可以得出结论：<strong>元组要比列表更加轻量级一些</strong>，所以总体上来说，元组的性能速度要略优于列表。</p><p>另外，Python在后台会对静态数据做一些<strong>资源缓存</strong>，由于垃圾回收机制的存在，一些变量不被使用就会被Python收回它们所占的内存。</p><p><strong>对于元组来说，如果占用空间并不大，Python会暂时缓存这部分</strong>，下次创建同等大小的内存就不必再去向操作系统申请，大大加快了程序运行速度。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>存储数据和数量不变时，用元祖。数据和数量可变时，用列表。</p><ul><li>初始化，元组快</li><li>索引操作，二者速度差不多</li><li>增加、删除，列表更优</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为极客时间 Python核心技术与实战 专栏的学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;相同点&quot;&gt;&lt;a href=&quot;#相同点&quot; class=&quot;headerlink&quot; title=&quot;相同点&quot;&gt;&lt;/a&gt;相同点&lt;/h1&gt;&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="Python" scheme="https://mrleecn.cn/tags/Python/"/>
    
      <category term="极客时间" scheme="https://mrleecn.cn/tags/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>【软技能】攀登晋升阶梯（二）</title>
    <link href="https://mrleecn.cn/2019/05/27/softskills2/"/>
    <id>https://mrleecn.cn/2019/05/27/softskills2/</id>
    <published>2019-05-27T14:10:10.000Z</published>
    <updated>2019-05-27T15:12:50.457Z</updated>
    
    <content type="html"><![CDATA[<p>本文笔记范围为书中的<strong>第9章</strong>。</p><h1 id="攀登晋升阶梯"><a href="#攀登晋升阶梯" class="headerlink" title="攀登晋升阶梯"></a>攀登晋升阶梯</h1><p>关于晋升，书中提到的几条建议：</p><ul><li><strong>承担责任</strong></li><li><strong>引人注目</strong></li><li><strong>自学</strong></li><li><strong>成为问题的解决者</strong></li></ul><p>下面分别对这几条建议进行阐述。</p><h2 id="承担责任"><a href="#承担责任" class="headerlink" title="承担责任"></a>承担责任</h2><p><strong>在任何公司能让你脱颖而出的最重要的法宝就是承担更多的责任</strong>。金钱总是追随着责任。有任何机会去承担更多责任时，请承担起来！</p><p><strong>没有人愿意涉足的领域是搜寻机会最好的地方。</strong>因为没有人愿意涉足，所以无需去抢，这些就成为你日益强大的帝国的领地。如果你能把沼泽变为良田，你也就展现了自己的价值。</p><p>另一种承担责任的方式是<strong>成为团队中其他人的导师。</strong>自愿帮助新人加速成长。通过介入和解决别人的问题，不仅可以学到更多自己专业以外的知识，而且随着时间推移，你在团队中<strong>逐步树立“及时雨”的名声</strong>。这样的声誉可能会让你成为团队领导或其他管理职位。</p><h2 id="引人注目"><a href="#引人注目" class="headerlink" title="引人注目"></a>引人注目</h2><p><strong>如果找不到方法让你的老板和高层管理员知道你在做什么，那你的努力都是徒劳。</strong></p><p><strong>文中作者引起老板注意的方法：</strong></p><p>每当开始新工作时，我（该书作者）所做的第一件事就是<strong>记日志</strong>，记录每天的时间都花在什么地方，完成了哪些工作。将这些信息汇总成周总结，<strong>每个周五发给上级领导。</strong>这份周报<strong>确保我每周都会被上级领导注意到</strong>。</p><p><strong>其他方式：</strong></p><ul><li><strong>提供演讲或培训</strong>——选择一个对你团队有用的话题。</li><li><strong>发表意见</strong>——只哟啊在会议上就这么做，或者只要你能得到机会就这么做。</li><li><strong>保证”曝光度“</strong>——定期与老板会面，确保你经常被注意到</li></ul><h2 id="自学"><a href="#自学" class="headerlink" title="自学"></a>自学</h2><p><strong>自学能让升职加薪变得容易，因为你可以很清楚地表明：现在的自己比之前更有价值。</strong></p><p>你应该不断学习新东西，提升自己的技能。报名参加培训课程，或者考相应的资质证书，都能表明你致力于不断提升自己。<strong>你掌握的东西越多，随之而来的机会就越多。</strong></p><p><strong>分享自己学到的东西。</strong>你可以通过演讲的方式，分享自己的知识，也可以创建自己的博客、为杂志写文章或写书。外部曝光有助于你建立自己在该领域的权威地位，也让你看起来对公司更有价值。</p><h2 id="成为问题的解决者"><a href="#成为问题的解决者" class="headerlink" title="成为问题的解决者"></a>成为问题的解决者</h2><p><strong>如果你能解决别人无法解决或不愿解决的问题，无论在哪家公司，你都能轻而易举地成为最有价值的人。</strong></p><p><strong>有时候只要意识到自己的工作毫无前途，就需要寻找更好的机会</strong>。无论什么原因，你可能都需要换工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文笔记范围为书中的&lt;strong&gt;第9章&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;攀登晋升阶梯&quot;&gt;&lt;a href=&quot;#攀登晋升阶梯&quot; class=&quot;headerlink&quot; title=&quot;攀登晋升阶梯&quot;&gt;&lt;/a&gt;攀登晋升阶梯&lt;/h1&gt;&lt;p&gt;关于晋升，书中提到的几条建议：
      
    
    </summary>
    
    
      <category term="软技能" scheme="https://mrleecn.cn/tags/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
      <category term="读书笔记" scheme="https://mrleecn.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【软技能】从非同凡响开始（一）</title>
    <link href="https://mrleecn.cn/2019/05/26/softskills1/"/>
    <id>https://mrleecn.cn/2019/05/26/softskills1/</id>
    <published>2019-05-25T16:18:10.000Z</published>
    <updated>2019-05-26T04:31:44.698Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《软技能 代码之外的生存指南》读书笔记——职业篇（一）</p></blockquote><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本文是<strong>《软技能 代码之外的生存指南》</strong>读书笔记的<strong>第一篇</strong>，通过记录读书笔记的方式，来复盘书中的一些自己有所感悟的内容。</p><p>本文笔记范围为书中的<strong>第2、3、4章</strong>。</p><h1 id="一、从非同凡响开始：绝不要做他人都在做的事"><a href="#一、从非同凡响开始：绝不要做他人都在做的事" class="headerlink" title="一、从非同凡响开始：绝不要做他人都在做的事"></a>一、从非同凡响开始：绝不要做他人都在做的事</h1><h2 id="转变思维"><a href="#转变思维" class="headerlink" title="转变思维"></a>转变思维</h2><p>时代已经变了，尽管在你的职业生涯的某个特定时间段里，可能在为某个公司打工，但不要让那个特定的角色固化你和你的职业生涯。尝试<strong>转变心态，把自己当作一个企业去思考</strong>，从被一纸“卖身契”束缚住的仆人转变为一名拥有自己生意的商人，<strong>积极主动地管理自己的职业生涯</strong>。</p><h2 id="如何像企业一样思考"><a href="#如何像企业一样思考" class="headerlink" title="如何像企业一样思考"></a>如何像企业一样思考</h2><p>从思考企业的构成开始，大多数成功企业都需要以下几样东西：</p><ul><li><p><strong>一个产品或服务</strong></p><p>不提供商品的企业是无法赚钱的，你有什么可卖？你的产品或服务是什么？</p></li></ul><ul><li><p><strong>关注市场营销</strong></p><p>想要赚钱，就必须能让潜在客户了解该产品或服务。产品营销做得越好，服务定价就越高，也越有机会吸引更多的潜在客户。</p></li></ul><ul><li><p><strong>想方设法提升你的服务</strong></p><p>服务质量与企业的发展成正相关。</p></li></ul><ul><li><p><strong>思考产品或服务的具体方向</strong></p><p>你可以专注为那一特定类型的客户或行业提供特定的服务。</p></li></ul><ul><li><p><strong>成为行业专家</strong></p><p>集中精力成为一名专家，专门为某一特定类型的客户提供专业的整体服务（只有你真正专注于一类客户，才能找到非常好的工作）。</p></li></ul><h2 id="采取行动"><a href="#采取行动" class="headerlink" title="采取行动"></a>采取行动</h2><ol><li>想象一下：<strong>有一家企业，拥有某个 产品或服务。他们将如何推广这一产品或服务从而做到卓尔不凡？</strong></li></ol><ol start="2"><li><strong>如果只用一句话来描述你的能为潜在雇主或客户提供怎样的特定服务，这句话是什么？</strong></li></ol><h1 id="二、思考未来：你的目标是什么"><a href="#二、思考未来：你的目标是什么" class="headerlink" title="二、思考未来：你的目标是什么"></a>二、思考未来：你的目标是什么</h1><h2 id="如何设定目标"><a href="#如何设定目标" class="headerlink" title="如何设定目标"></a>如何设定目标</h2><h3 id="树立一个大目标"><a href="#树立一个大目标" class="headerlink" title="树立一个大目标"></a>树立一个大目标</h3><p>起初阶段最简单的就是<strong>在心中树立一个大目标，然后再建立能帮你达成这个大目标的小目标。</strong></p><p>因为很难清晰地界定远期可能发生的事情，所以大目标：</p><ul><li><p><strong>不够具体，只需要具体到能给你提供清晰的方向</strong></p><p>如同航海一般，刚开始，我们没必要立刻知道要驶向的港口的精确经纬度，只需要朝着目标港口航向前进。随着离目标越来越近，就能获得更多数据，不断修正航线，最终到达目标港口。</p></li><li><p><strong>不需要那么具体，但必须足够清晰，能够让你知道自己是在向它靠近还是远离</strong></p></li></ul><h3 id="建立小目标"><a href="#建立小目标" class="headerlink" title="建立小目标"></a>建立小目标</h3><p><strong>如果你可以驱动小目标逐渐靠近你的大目标，那么最终你一定功能到达目的地。</strong></p><p><strong>设定大小不同的目标，确保你向着自己的大目标前进</strong>，这一点非常重要。</p><p><strong>合理小目标的好处：</strong></p><ol><li>较小的目标可以保证自己航行在正确的轨道上，不会偏离最终大目标。</li><li>达成小目标，让我们感觉良好，帮助我们继续前进。</li><li>较小的目标不像大目标那样令人望而生畏。</li></ol><h2 id="追踪你的目标"><a href="#追踪你的目标" class="headerlink" title="追踪你的目标"></a>追踪你的目标</h2><p><strong>定期核对自己目标</strong>，反思自己在短期和长期取得的成果是大有裨益的，你能够弄清楚自己是否取得了合理的进展，或是是否要进行某些调整。</p><h2 id="采取行动-1"><a href="#采取行动-1" class="headerlink" title="采取行动"></a>采取行动</h2><ol><li><strong>为你的职业生涯设置至少一个大目标</strong>。</li><li><strong>将大目标分解成相应的若干小目标</strong>，例如：<ul><li>月目标</li><li>周目标</li><li>每日目标</li></ul></li><li><strong>把你的大目标卸载自己每天必经之地，每日三省吾身——我在追求什么</strong>。</li></ol><h1 id="三、人际交往能力：远比你想象的重要"><a href="#三、人际交往能力：远比你想象的重要" class="headerlink" title="三、人际交往能力：远比你想象的重要"></a>三、人际交往能力：远比你想象的重要</h1><h2 id="人际交往的你需要知道的重要原则"><a href="#人际交往的你需要知道的重要原则" class="headerlink" title="人际交往的你需要知道的重要原则"></a>人际交往的你需要知道的重要原则</h2><h3 id="1-每个人都希望感到自己很重要"><a href="#1-每个人都希望感到自己很重要" class="headerlink" title="1. 每个人都希望感到自己很重要"></a>1. 每个人都希望感到自己很重要</h3><p><strong>以自己为核心，每个人都希望自己很重要</strong>。这是人类最深邃、最致命的欲望之一。也是社会和生活中取得伟大成就的主要动机。</p><p>如果你希望人们接受你的想法，并认可其中价值，首先你最好<strong>主动给他人同样的礼遇</strong>。如果你不能保全他人的自醉，那你永远也不可能赢得他的心。</p><h3 id="2-永远不要批评"><a href="#2-永远不要批评" class="headerlink" title="2. 永远不要批评"></a>2. 永远不要批评</h3><p><strong>“批评”是一项很少能够达成你期望结果的工具。</strong></p><p><strong>奖励积极行为要比惩罚消极行为有效得多。</strong>如果你想激励团队鼓舞士气，那就用表扬替代批评吧。</p><h3 id="3-换位思考"><a href="#3-换位思考" class="headerlink" title="3. 换位思考"></a>3. 换位思考</h3><p><strong>停用”我”和“我想要什么”来思考</strong>，开始思考对他人而言什么才最重要，什么才是他们需要的。</p><p><strong>从对方的心态出发提建议。</strong></p><h3 id="4-避免争吵"><a href="#4-避免争吵" class="headerlink" title="4. 避免争吵"></a>4. 避免争吵</h3><p>如果你认为“该怎么做某事”与他人产生分歧，那么在多数情况下，你最好能确定分歧点是否值得你拼命维护。<strong>小事情上，任何放弃立场或承认错误的机会对你而言可能没什么大不了的，但对他人却可能是举足轻重的</strong>，这么做不仅能为你赢得不可估量的尊重。也能为你的未来积蓄财富，形势逆转时即可兑换使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;《软技能 代码之外的生存指南》读书笔记——职业篇（一）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;本文是&lt;stro
      
    
    </summary>
    
    
      <category term="软技能" scheme="https://mrleecn.cn/tags/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
      <category term="读书笔记" scheme="https://mrleecn.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>字符带旋转的验证码识别思路（Python）</title>
    <link href="https://mrleecn.cn/2019/05/22/yzm-thinking/"/>
    <id>https://mrleecn.cn/2019/05/22/yzm-thinking/</id>
    <published>2019-05-22T08:26:14.000Z</published>
    <updated>2019-05-24T15:33:45.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>为了实现某网站的模拟登录，需要对验证码进行识别，该验证码除了有背景的干扰图案之外，字符也有<strong>不同角度的倾斜</strong>，<strong>高度也不统一</strong>，如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://prwhphxqa.bkt.clouddn.com/blog/20190524/d2QvuRTvckKu.gif" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://prwhphxqa.bkt.clouddn.com/blog/20190524/3RWw0c55yLWU.gif" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><h1 id="面临的问题"><a href="#面临的问题" class="headerlink" title="面临的问题"></a>面临的问题</h1><p>经过各方查找，网上大多数验证码识别教程都是<strong>字符规整且直立</strong>的验证码，方法也都大同小异。</p><ul><li>字符粘连在一起就切片，自己做验证码库进行识别；</li><li>没有粘连在一起，就通过<strong>机器学习、神经网络</strong>等方法进行识别。</li></ul><p>对于<strong>没有学习过机器学习、神经网络</strong>的我，不能短时间上手。</p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>于是，想到了采用<strong>切片做库</strong>的识别思路。</p><h2 id="第一步：获取大量验证码图片"><a href="#第一步：获取大量验证码图片" class="headerlink" title="第一步：获取大量验证码图片"></a>第一步：获取大量验证码图片</h2><p>下载大量的验证码（视情况而定，<strong>我选择了300张</strong>），为后面验证码切片做库做准备。<strong>图片最好保存为gif格式</strong>。</p><h2 id="第二步：验证码图片预处理"><a href="#第二步：验证码图片预处理" class="headerlink" title="第二步：验证码图片预处理"></a>第二步：验证码图片预处理</h2><p>对第一步下载的全部验证码图片进行<strong>灰度化、二值化</strong>。</p><p>为保证经过预处理后的验证码图片效果，此处需要对<strong>二值化的阈值，进行仔细调整</strong>。</p><p><strong>预处理代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">preprocessing</span><span class="params">(yzm_path=<span class="string">'yzm.gif'</span>, new_yzm_path=<span class="string">'yzm.gif'</span>)</span>:</span></span><br><span class="line">       <span class="string">'''</span></span><br><span class="line"><span class="string">       验证码预处理，灰度化，二值化</span></span><br><span class="line"><span class="string">       :param captcha_path:    验证码图片路径</span></span><br><span class="line"><span class="string">       :param new_captcha_path: 经过预处理后验证码图片保存路径</span></span><br><span class="line"><span class="string">       '''</span></span><br><span class="line">       image = Image.open(yzm_path)</span><br><span class="line">       <span class="comment"># 灰度化</span></span><br><span class="line">       image = image.convert(<span class="string">'L'</span>)</span><br><span class="line">       <span class="comment"># 二值化</span></span><br><span class="line">       table = []</span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">           <span class="keyword">if</span> i &lt; self.threshold:</span><br><span class="line">               table.append(<span class="number">0</span>)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               table.append(<span class="number">1</span>)</span><br><span class="line">       image = image.point(table, <span class="string">'1'</span>)</span><br><span class="line">       image.save(new_yzm_path)</span><br></pre></td></tr></table></figure><p>经过预处理后的图片如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://prwhphxqa.bkt.clouddn.com/blog/20190524/Sn3AoOvHkock.gif" alt="mark" title>                </div>                <div class="image-caption">mark</div>            </figure><h2 id="第三步：-验证码图片切片"><a href="#第三步：-验证码图片切片" class="headerlink" title="第三步： 验证码图片切片"></a>第三步： 验证码图片切片</h2><p>因为每个字符高度不统一，因此切片时除了要将每个字符单独切出来外，还要<strong>将字符四周多余空白行（列）也要去除。</strong> </p><p>这里将会<strong>出现一个问题</strong>，对于字符<code>i</code>、<code>j</code>在某些倾斜角度时，无法保证<code>i</code>、<code>j</code>切片的完整性。这里，我们选择性<strong>放弃<code>i</code>、<code>j</code>首部的点，而只留下尾部</strong>（因为首部的点相对于尾部，不具有辨识度）。</p><p><strong>将全部经过预处理后的验证码图片进行切片操作</strong>。切片方法，请移步到我的另一篇博客<a href="https://www.mrleecn.cn/2019/05/21/image-split/" target="_blank" rel="noopener">验证码高效切片方法（Python）</a>。</p><h2 id="第四步：手动制作原始验证码库"><a href="#第四步：手动制作原始验证码库" class="headerlink" title="第四步：手动制作原始验证码库"></a>第四步：手动制作原始验证码库</h2><p>这一步最为繁琐。将第三步切片后的字符图片进行分类。可以借助<strong>打码平台</strong>帮你完成，也可通过自己手动对字符图片进行分类。<strong>制作原始的验证码库</strong>（我的分类方法：在一个空目录下建立以0-9、a-z命名的36个目录，将对应字符图片放到对应目录中）。</p><p>我的原始验证码库达到<strong>1500张</strong>字符图片。经测试<strong>识别率在70%</strong>。</p><h2 id="第五步：验证码识别"><a href="#第五步：验证码识别" class="headerlink" title="第五步：验证码识别"></a>第五步：验证码识别</h2><p>这一步可以参考<a href="https://blog.csdn.net/weixin_39121325/article/details/84187453" target="_blank" rel="noopener">Python计算图片之间的相似度</a></p><p>以下是我修改后的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_similarity_degree</span><span class="params">(vector1, vector2)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算两图片的相似度</span></span><br><span class="line"><span class="string">    :param vector1: 图片1的向量</span></span><br><span class="line"><span class="string">    :param vector2: 图片2的向量</span></span><br><span class="line"><span class="string">    :return: 相似度</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># dot返回的是点积，对二维数组（矩阵）进行计算</span></span><br><span class="line">    res = dot(vector1, vector2)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_vectors</span><span class="params">(image)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算图片的余弦距离</span></span><br><span class="line"><span class="string">    :param image: Image图片对象</span></span><br><span class="line"><span class="string">    :return: 图片的向量</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    image = image.resize(compare_img_size, Image.ANTIALIAS)<span class="comment"># compare_img_size=(30, 30)</span></span><br><span class="line">    vector = []</span><br><span class="line">    <span class="keyword">for</span> pixel_tuple <span class="keyword">in</span> image.getdata():</span><br><span class="line">        vector.append(average(pixel_tuple))</span><br><span class="line">    <span class="comment"># linalg=linear（线性）+algebra（代数），norm则表示范数</span></span><br><span class="line">    <span class="comment"># 求图片的范数</span></span><br><span class="line">    norm = linalg.norm(vector, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> vector / norm</span><br></pre></td></tr></table></figure><h2 id="第六步：实现验证码库自动更新"><a href="#第六步：实现验证码库自动更新" class="headerlink" title="第六步：实现验证码库自动更新"></a>第六步：实现验证码库自动更新</h2><p>进行大量的模拟登录（使用自己的验证码库做识别），当<strong>模拟登录成功</strong>且<strong>验证码字符与验证码库内字符切片相似度小于某个值</strong>（我选择的95%）时，将改验证码字符加入到验证码库中。</p><p>关键代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">yzmstore_update</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="string">'''</span></span><br><span class="line"><span class="string">      将正确的验证码切片加入库中，以时间戳命名</span></span><br><span class="line"><span class="string">      :param result: 验证码字符串</span></span><br><span class="line"><span class="string">      :return:</span></span><br><span class="line"><span class="string">      '''</span></span><br><span class="line"><span class="comment"># self.yzmstore_waitupdate_img = ['./img_crop/z/split_0.gif', ....]</span></span><br><span class="line">      letters_list = list(i[<span class="number">1</span>].split(<span class="string">'/'</span>)[<span class="number">-2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> self.yzmstore_waitupdate_img)  <span class="comment"># 获取验证码对应字符 ['z']</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> range(len(letters_list)):</span><br><span class="line">          new_yzm_dir = <span class="string">'&#123;0&#125;&#123;1&#125;/'</span>.format(self.yzmstore_rootdir, letters_list[i])</span><br><span class="line">          time_stamp = time.time()  <span class="comment"># 当前时间戳</span></span><br><span class="line">          time.sleep(<span class="number">0.1</span>)         <span class="comment"># 等待0.1s避免时间戳一致</span></span><br><span class="line">          new_yzm_name = <span class="string">'&#123;0&#125;split&#123;1&#125;.gif'</span>.format(new_yzm_dir, str(time_stamp).replace(<span class="string">'.'</span>, <span class="string">''</span>))  <span class="comment"># 去掉时间戳中的'.'</span></span><br><span class="line">          old_yzm_name = self.yzmstore_waitupdate_img[i][<span class="number">0</span>]</span><br><span class="line">          shutil.move(old_yzm_name, new_yzm_name)     <span class="comment"># 将待添加的验证码图片移动到验证码库中</span></span><br></pre></td></tr></table></figure><p>经测试，当验证码库达到<strong>5000张</strong>时，<strong>识别率达到94%</strong>。</p><h1 id="细节部分"><a href="#细节部分" class="headerlink" title="细节部分"></a>细节部分</h1><p>由于计算图片向量值很耗时，所以可以<strong>提前将验证码库内字符图片的向量值提前计算好</strong>，进行模拟登录时，只需计算当前验证码的向量值，然后和已经计算好的验证码库的图片的向量进行相似度比较即可（比较速度非常快：<strong>不到0.5s</strong>）。从而减少整个模拟登录的时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;p&gt;为了实现某网站的模拟登录，需要对验证码进行识别，该验证码除了有背景的干扰图案之外，字符也有&lt;strong&gt;不同角度的倾斜&lt;/
      
    
    </summary>
    
    
      <category term="Python" scheme="https://mrleecn.cn/tags/Python/"/>
    
      <category term="爬虫" scheme="https://mrleecn.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="验证码识别" scheme="https://mrleecn.cn/tags/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>Numpy笔记</title>
    <link href="https://mrleecn.cn/2019/05/22/numpy/"/>
    <id>https://mrleecn.cn/2019/05/22/numpy/</id>
    <published>2019-05-22T06:28:25.000Z</published>
    <updated>2019-05-24T15:33:45.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准Python列表list的缺点"><a href="#标准Python列表list的缺点" class="headerlink" title="标准Python列表list的缺点"></a>标准Python列表list的缺点</h1><p>标准的 Python 中，用列表 list 保存数组的数值。由于列表中的元素可以是任意的对象，所以列表中list保存的是对象的指针。虽然Python中隐区了指针的概念。但是数组有指针，Python的列表list其实就是数组。这样如果我要保存一个简单的数组[0, 1, 2]，就需要有3个指针和3个整数对象。这样对于Python来说是非常不经济的，浪费内存和计算时间。</p><h1 id="为什么用Numpy"><a href="#为什么用Numpy" class="headerlink" title="为什么用Numpy"></a>为什么用Numpy</h1><p>为什么要用 NumPy 数组结构而不是 Python 本身的列表 list？这是因为列表 list 的元素在系统内存中是分散存储的，而 NumPy 数组存储在一个均匀连续的内存块中。这样数组计算遍历所有的元素，不像列表 list 还需要对内存地址进行查找，从而节省了计算资源。</p><p>另外在内存访问模式中，缓存会直接把字节块从 RAM 加载到 CPU 寄存器中。因为数据连续的存储在内存中，NumPy 直接利用现代 CPU 的矢量化指令计算，加载寄存器中的多个连续浮点数。另外 NumPy 中的矩阵计算可以采用多线程的方式，充分利用多核 CPU 计算资源，大大提升了计算效率。</p><p>当然除了使用 NumPy 外，你还需要一些技巧来提升内存和提高计算资源的利用率。一个重要的规则就是：<strong>避免采用隐式拷贝，而是采用就地操作的方式</strong>。举个例子，如果我想让一个数值 x 是原来的两倍，可以直接写成 x<em>=2，而不要写成 y=x</em>2。这样速度能快到 2 倍甚至更多。</p><h1 id="Numpy基础"><a href="#Numpy基础" class="headerlink" title="Numpy基础"></a>Numpy基础</h1><h2 id="NumPy-用字符编码来表示数据类型。如下表"><a href="#NumPy-用字符编码来表示数据类型。如下表" class="headerlink" title="NumPy 用字符编码来表示数据类型。如下表:"></a>NumPy 用字符编码来表示数据类型。如下表:</h2><table><thead><tr><th>数据类型</th><th>字符编码</th></tr></thead><tbody><tr><td>整数</td><td>i</td></tr><tr><td>无符号整数</td><td>u</td></tr><tr><td>单精度浮点数</td><td>f</td></tr><tr><td>双精度浮点数</td><td>d</td></tr><tr><td>布尔值</td><td>b</td></tr><tr><td>复数</td><td>D</td></tr><tr><td>字符串</td><td>S</td></tr><tr><td>Unicode</td><td>U</td></tr><tr><td>Void</td><td>V</td></tr></tbody></table><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([1, 2, 3])</span><br><span class="line">b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])</span><br><span class="line">b[1,1]=10       # 直接修改数组元素</span><br><span class="line">print a.shape   # 数组形状</span><br><span class="line">print b.shape</span><br><span class="line">print a.dtype   # 数组类型</span><br><span class="line">print b</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">(3L,)</span><br><span class="line">(3L, 3L)</span><br><span class="line">int32</span><br><span class="line">[[ 1  2  3]</span><br><span class="line"> [ 4 10  6]</span><br><span class="line"> [ 7  8  9]]</span><br></pre></td></tr></table></figure><h2 id="结构数组"><a href="#结构数组" class="headerlink" title="结构数组"></a>结构数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 自定义数组类型</span><br><span class="line">import numpy as np</span><br><span class="line">persontype = np.dtype(&#123;</span><br><span class="line">    &apos;names&apos;:[&apos;name&apos;, &apos;age&apos;, &apos;chinese&apos;, &apos;math&apos;, &apos;english&apos;],</span><br><span class="line">    &apos;formats&apos;:[&apos;S32&apos;,&apos;i&apos;, &apos;i&apos;, &apos;i&apos;, &apos;f&apos;]&#125;)</span><br><span class="line">peoples = np.array([(&quot;ZhangFei&quot;,32,75,100, 90),(&quot;GuanYu&quot;,24,85,96,88.5),</span><br><span class="line">       (&quot;ZhaoYun&quot;,28,85,92,96.5),(&quot;HuangZhong&quot;,29,65,85,100)],</span><br><span class="line">    dtype=persontype)</span><br><span class="line">ages = peoples[:][&apos;age&apos;]</span><br><span class="line">chineses = peoples[:][&apos;chinese&apos;]</span><br><span class="line">maths = peoples[:][&apos;math&apos;]</span><br><span class="line">englishs = peoples[:][&apos;english&apos;]</span><br><span class="line">print np.mean(ages)</span><br><span class="line">print np.mean(chineses)</span><br><span class="line">print np.mean(maths)</span><br><span class="line">print np.mean(englishs)</span><br><span class="line"></span><br><span class="line">==================</span><br><span class="line">28.25</span><br><span class="line">77.5</span><br><span class="line">93.25</span><br><span class="line">93.75</span><br></pre></td></tr></table></figure><h2 id="连续数组的创建"><a href="#连续数组的创建" class="headerlink" title="连续数组的创建"></a>连续数组的创建</h2><p>np.arange 和 np.linspace 起到的作用是一样的，都是创建等差数组。这两个数组的结果 x1,x2 都是 [1 3 5 7 9]。结果相同，但是你能看出来创建的方式是不同的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.arange(1,11,2)</span><br><span class="line">x2 = np.linspace(1,9,5)</span><br></pre></td></tr></table></figure></p><h2 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h2><p>通过 NumPy 可以自由地创建等差数组，同时也可以进行加、减、乘、除、求n次方、取余的运算。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.arange(1,11,2)</span><br><span class="line">x2 = np.linspace(1,9,5)</span><br><span class="line">print np.add(x1, x2)        # 加</span><br><span class="line">print np.subtract(x1, x2)   # 减</span><br><span class="line">print np.multiply(x1, x2)   # 乘</span><br><span class="line">print np.divide(x1, x2)     # 除</span><br><span class="line">print np.power(x1, x2)      # n次方</span><br><span class="line">print np.remainder(x1, x2)  # 取余</span><br><span class="line"></span><br><span class="line">==================</span><br><span class="line">[ 2.  6. 10. 14. 18.]</span><br><span class="line">[0. 0. 0. 0. 0.]</span><br><span class="line">[ 1.  9. 25. 49. 81.]</span><br><span class="line">[1. 1. 1. 1. 1.]</span><br><span class="line">[1.00000000e+00 2.70000000e+01 3.12500000e+03 8.23543000e+05</span><br><span class="line"> 3.87420489e+08]</span><br><span class="line">[0. 0. 0. 0. 0.]</span><br></pre></td></tr></table></figure></p><h2 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h2><table><thead><tr><th>函数名</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>amax()</td><td>最大值函数</td><td></td></tr><tr><td>amin()</td><td>最小值函数</td><td></td></tr><tr><td>ptp()</td><td>最大值与最小值之差</td><td></td></tr><tr><td>percentile()</td><td>数组百分位数（）</td><td>百分位数的概念：第p个百分位数是这样一个值，它使得至少有p%的数据项小于或等于这个值，且至少有(100-p)%的数据项大于或等于这个值。</td></tr><tr><td>median()</td><td>中位数</td><td></td></tr><tr><td>mean()</td><td>平均数</td><td></td></tr><tr><td>average()</td><td>加权平均数</td><td>默认权值为1</td></tr><tr><td>std()</td><td>标准差</td><td></td></tr><tr><td>var()</td><td>方差</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.array([[1,2,3], [4,5,6], [7,8,9]])</span><br><span class="line"></span><br><span class="line"># 最小值</span><br><span class="line">print np.amin(a)    # 矩阵中最小元素</span><br><span class="line">print np.amin(a,0)  # 按列计数的计数组中的最小元素</span><br><span class="line">print np.amin(a,1)  # 按行计数的计数组中的最小元素</span><br><span class="line">1</span><br><span class="line">[1 2 3]</span><br><span class="line">[1 4 7]</span><br><span class="line">===================</span><br><span class="line"># 最大值</span><br><span class="line">print np.amax(a)    # 矩阵中最大元素</span><br><span class="line">print np.amax(a,0)  # 按列计数的计数组中的最大元素</span><br><span class="line">print np.amax(a,1)  # 按行计数的计数组中的最大元素</span><br><span class="line">9</span><br><span class="line">[7 8 9]</span><br><span class="line">[3 6 9]</span><br><span class="line">===================</span><br><span class="line"># 最小值、最大值之差</span><br><span class="line">print np.ptp(a)</span><br><span class="line">print np.ptp(a,0)</span><br><span class="line">print np.ptp(a,1)</span><br><span class="line">8</span><br><span class="line">[6 6 6]</span><br><span class="line">[2 2 2]</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line"># 百分位数（取值0-100）</span><br><span class="line">print np.percentile(a, 50)  # 50表示取中位数</span><br><span class="line">print np.percentile(a, 50, axis=0)</span><br><span class="line">print np.percentile(a, 50, axis=1)</span><br><span class="line">5.0</span><br><span class="line">[4. 5. 6.]</span><br><span class="line">[2. 5. 8.]</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line"># 中位数</span><br><span class="line">print np.median(a)</span><br><span class="line">print np.median(a, axis=0)</span><br><span class="line">print np.median(a, axis=1)</span><br><span class="line">5.0</span><br><span class="line">[4. 5. 6.]</span><br><span class="line">[2. 5. 8.]</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line"># 求平均数</span><br><span class="line">print np.mean(a)</span><br><span class="line">print np.mean(a, axis=0)</span><br><span class="line">print np.mean(a, axis=1)</span><br><span class="line">5.0</span><br><span class="line">[4. 5. 6.]</span><br><span class="line">[2. 5. 8.]</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line"># 加权平均值</span><br><span class="line">a = np.array([1,2,3,4])</span><br><span class="line">wts = np.array([1,2,3,4])   # 权重</span><br><span class="line">print np.average(a)</span><br><span class="line">print np.average(a,weights=wts)</span><br><span class="line">2.5</span><br><span class="line">3.0</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line"># 标准差、方差</span><br><span class="line">a = np.array([1,2,3,4])</span><br><span class="line">print np.std(a)</span><br><span class="line">print np.var(a)</span><br><span class="line">1.118033988749895</span><br><span class="line">1.25</span><br><span class="line">===================</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(a, axis=-1, kind=‘quicksort’, order=None)</span><br></pre></td></tr></table></figure><p>默认情况下使用的是<strong>快速排序</strong>；</p><p><strong>kind</strong> 可以指定 </p><ul><li>quicksort 快速排序</li><li>mergesort 合并排序</li><li>heapsort  堆排序</li></ul><p><strong>axis</strong> 默认是-1，即沿着数组的最后一个轴进行排序也可以取不同的 axis 轴，或者 axis=None 代表采用扁平化的方式作为一个向量进行排序。</p><p><strong>order</strong> 字段，对于结构化的数组可以指定按照某个字段进行排序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[4,3,2],[2,4,1]])</span><br><span class="line">print np.sort(a)</span><br><span class="line">print np.sort(a, axis=None)  # 扁平化排序</span><br><span class="line">print np.sort(a, axis=0)  </span><br><span class="line">print np.sort(a, axis=1)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[2 3 4]</span><br><span class="line"> [1 2 4]]</span><br><span class="line">[1 2 2 3 4 4]</span><br><span class="line">[[2 3 1]</span><br><span class="line"> [4 4 2]]</span><br><span class="line">[[2 3 4]</span><br><span class="line"> [1 2 4]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标准Python列表list的缺点&quot;&gt;&lt;a href=&quot;#标准Python列表list的缺点&quot; class=&quot;headerlink&quot; title=&quot;标准Python列表list的缺点&quot;&gt;&lt;/a&gt;标准Python列表list的缺点&lt;/h1&gt;&lt;p&gt;标准的 Python
      
    
    </summary>
    
    
      <category term="Python" scheme="https://mrleecn.cn/tags/Python/"/>
    
      <category term="数据处理" scheme="https://mrleecn.cn/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="Numpy" scheme="https://mrleecn.cn/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>Pandas中 Series、DataFrame</title>
    <link href="https://mrleecn.cn/2019/05/22/Pandas/"/>
    <id>https://mrleecn.cn/2019/05/22/Pandas/</id>
    <published>2019-05-22T06:10:17.000Z</published>
    <updated>2019-05-24T15:33:45.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><p><strong>是一个定长的字典序列。</strong><br>两个基本属性：<strong>index</strong> 和<strong>values</strong></p><h2 id="建立Series"><a href="#建立Series" class="headerlink" title="建立Series"></a>建立Series</h2><p>第一种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from pandas import Series, DataFrame</span><br><span class="line">x1 = Series([1, 2, 3, 4])</span><br><span class="line">x2 = Series(data=[1, 2, 3, 4], index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])</span><br><span class="line">print(x1)</span><br><span class="line">print(x2)</span><br><span class="line"></span><br><span class="line">0    1</span><br><span class="line">1    2</span><br><span class="line">2    3</span><br><span class="line">3    4</span><br><span class="line">dtype: int64</span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">d    4</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><p>第二种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&apos;a&apos;:1, &apos;b&apos;:2, &apos;c&apos;:3, &apos;d&apos;:4&#125;</span><br><span class="line">x3 = Series(d)</span><br><span class="line">print(x3)</span><br><span class="line"></span><br><span class="line">a    1</span><br><span class="line">b    2</span><br><span class="line">c    3</span><br><span class="line">d    4</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p><h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p><strong>类似于数据库表</strong>包括<strong>行索引</strong>和<strong>列索引</strong></p><h2 id="建立DataFrame"><a href="#建立DataFrame" class="headerlink" title="建立DataFrame"></a>建立DataFrame</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from pandas import Series, DataFrame</span><br><span class="line">data = &#123;&apos;Chinese&apos;: [66, 95, 93, 90, 80],</span><br><span class="line">        &apos;English&apos;: [65, 85, 92, 88, 90],</span><br><span class="line">        &apos;Math&apos;: [30, 98, 96, 77, 90]&#125;</span><br><span class="line">df1 = DataFrame(data)</span><br><span class="line">df2 = DataFrame(data, index=[&apos;ZhangFei&apos;, &apos;GuanYu&apos;, &apos;ZhaoYun&apos;, &apos;HuangZhong&apos;, &apos;DianWei&apos;], columns=[&apos;English&apos;, &apos;Math&apos;, &apos;Chinese&apos;])</span><br><span class="line">print(df1)</span><br><span class="line">print(df2)</span><br><span class="line"></span><br><span class="line">   Chinese  English  Math</span><br><span class="line">0       66       65    30</span><br><span class="line">1       95       85    98</span><br><span class="line">2       93       92    96</span><br><span class="line">3       90       88    77</span><br><span class="line">4       80       90    90</span><br><span class="line"></span><br><span class="line">            English  Math  Chinese</span><br><span class="line">ZhangFei         65    30       66</span><br><span class="line">GuanYu           85    98       95</span><br><span class="line">ZhaoYun          92    96       93</span><br><span class="line">HuangZhong       88    77       90</span><br><span class="line">DianWei          90    90       80</span><br></pre></td></tr></table></figure><h2 id="数据导入和导出"><a href="#数据导入和导出" class="headerlink" title="数据导入和导出"></a>数据导入和导出</h2><p>Pandas支持直接从xlsx,csv等文件中导入数据，也可以导出到xlsx,csv等文件中。（可能少包，根据提示安装即可）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from pandas import Series, DataFrame</span><br><span class="line">score = DataFrame(pd.read_excel(&apos;data.xlsx&apos;))       # 导入</span><br><span class="line">score.to_excel(&apos;data1.xlsx&apos;)                        # 导出</span><br><span class="line">print score</span><br></pre></td></tr></table></figure></p><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;&apos;Chinese&apos;: [66, 95, 93, 90,80],&apos;English&apos;: [65, 85, 92, 88, 90],&apos;Math&apos;: [30, 98, 96, 77, 90]&#125;</span><br><span class="line">df2 = DataFrame(data, index=[&apos;ZhangFei&apos;, &apos;GuanYu&apos;, &apos;ZhaoYun&apos;, &apos;HuangZhong&apos;, &apos;DianWei&apos;], columns=[&apos;English&apos;, &apos;Math&apos;, &apos;Chinese&apos;])</span><br></pre></td></tr></table></figure><h3 id="去除不必要的行或列"><a href="#去除不必要的行或列" class="headerlink" title="去除不必要的行或列"></a>去除不必要的行或列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2 = df2.drop(columns=[&apos;Chinese&apos;])</span><br></pre></td></tr></table></figure><h3 id="重命名columns，让列名更容易识别"><a href="#重命名columns，让列名更容易识别" class="headerlink" title="重命名columns，让列名更容易识别"></a>重命名columns，让列名更容易识别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.rename(columns=&#123;&apos;Chinese&apos;: &apos;YuWen&apos;, &apos;English&apos;: &apos;Yingyu&apos;&#125;, inplace = True)</span><br></pre></td></tr></table></figure><h3 id="去除重复值"><a href="#去除重复值" class="headerlink" title="去除重复值"></a>去除重复值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.drop_duplicates() # 去除重复行</span><br></pre></td></tr></table></figure><h3 id="格式问题"><a href="#格式问题" class="headerlink" title="格式问题"></a>格式问题</h3><h4 id="修改数据格式"><a href="#修改数据格式" class="headerlink" title="修改数据格式"></a>修改数据格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df2[&apos;Chinese&apos;] = df2[&apos;Chinese&apos;].astype(&apos;str&apos;) </span><br><span class="line">df2[&apos;Chinese&apos;] = df2[&apos;Chinese&apos;].astype(np.int64)</span><br></pre></td></tr></table></figure><h4 id="数据间的空格"><a href="#数据间的空格" class="headerlink" title="数据间的空格"></a>数据间的空格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 删除左右两边空格</span><br><span class="line">df2[&apos;Chinese&apos;]=df2[&apos;Chinese&apos;].map(str.strip)</span><br><span class="line"># 删除左边空格</span><br><span class="line">df2[&apos;Chinese&apos;]=df2[&apos;Chinese&apos;].map(str.lstrip)</span><br><span class="line"># 删除右边空格</span><br><span class="line">df2[&apos;Chinese&apos;]=df2[&apos;Chinese&apos;].map(str.rstrip)</span><br></pre></td></tr></table></figure><h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 全部大写</span><br><span class="line">df2.columns = df2.columns.str.upper()</span><br><span class="line"># 全部小写</span><br><span class="line">df2.columns = df2.columns.str.lower()</span><br><span class="line"># 首字母大写</span><br><span class="line">df2.columns = df2.columns.str.title()</span><br></pre></td></tr></table></figure><h4 id="查找空值"><a href="#查找空值" class="headerlink" title="查找空值"></a>查找空值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看那个地方存在空值</span><br><span class="line">df.isnull()</span><br><span class="line"># 查看哪列存在空值</span><br><span class="line">df.isnull().any()</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h3><p>目前未用到</p><h2 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h2><p>Pandas 和 NumPy 一样，都有常用的统计函数，如果遇到空值 NaN，会自动排除。<br>常见统计函数：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>count()</td><td>统计个数，空值、NaN不计算</td></tr><tr><td>describe()</td><td>一次性输出多个统计指标，包括：count、mean、std、min、max等</td></tr><tr><td>min()</td><td>最小值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>sum()</td><td>总和</td></tr><tr><td>mean()</td><td>平均值</td></tr><tr><td>median()</td><td>中位数</td></tr><tr><td>var()</td><td>方差</td></tr><tr><td>std()</td><td>标准差</td></tr><tr><td>argmin()</td><td>统计最小值的索引位置</td></tr><tr><td>argmax()</td><td>统计最大值的索引位置</td></tr><tr><td>idxmin()</td><td>统计最小值的索引值</td></tr><tr><td>idxmax()</td><td>统计最大值的索引值</td></tr></tbody></table><h3 id="数据表合并"><a href="#数据表合并" class="headerlink" title="数据表合并"></a>数据表合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1 = DataFrame(&#123;&apos;name&apos;:[&apos;ZhangFei&apos;, &apos;GuanYu&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;], &apos;data1&apos;:range(5)&#125;)</span><br><span class="line">df2 = DataFrame(&#123;&apos;name&apos;:[&apos;ZhangFei&apos;, &apos;GuanYu&apos;, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;], &apos;data2&apos;:range(5)&#125;)</span><br></pre></td></tr></table></figure><h3 id="指定列连接"><a href="#指定列连接" class="headerlink" title="指定列连接"></a>指定列连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3 = pd.merge(df1, df2, on=&apos;name&apos;)</span><br></pre></td></tr></table></figure><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>merge的默认合并情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3 = pd.merge(df1, df2, how=&apos;inner&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3 = pd.merge(df1, df2, how=&apos;left&apos;)</span><br></pre></td></tr></table></figure><h3 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3 = pd.merge(df1, df2, how=&apos;right&apos;)</span><br></pre></td></tr></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3 = pd.merge(df1, df2, how=&apos;outer&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Series&quot;&gt;&lt;a href=&quot;#Series&quot; class=&quot;headerlink&quot; title=&quot;Series&quot;&gt;&lt;/a&gt;Series&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;是一个定长的字典序列。&lt;/strong&gt;&lt;br&gt;两个基本属性：&lt;strong&gt;index&lt;/
      
    
    </summary>
    
    
      <category term="Python" scheme="https://mrleecn.cn/tags/Python/"/>
    
      <category term="Pandas" scheme="https://mrleecn.cn/tags/Pandas/"/>
    
      <category term="数据处理" scheme="https://mrleecn.cn/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>验证码高效切片方法（Python）</title>
    <link href="https://mrleecn.cn/2019/05/21/image-split/"/>
    <id>https://mrleecn.cn/2019/05/21/image-split/</id>
    <published>2019-05-21T11:46:14.000Z</published>
    <updated>2019-06-22T02:53:33.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>验证码图片如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190526/lV8foCeMvI2C.gif" alt="验证码" title>                </div>                <div class="image-caption">验证码</div>            </figure><p>切片完成后的效果如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190526/15RBpuYBKYia.gif" alt="切片1" title>                </div>                <div class="image-caption">切片1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190526/7Q6VRgok85tR.gif" alt="切片2" title>                </div>                <div class="image-caption">切片2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190526/DM3D9nRs8Eeb.gif" alt="切片3" title>                </div>                <div class="image-caption">切片3</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190526/6KScAEePHSIx.gif" alt="切片4" title>                </div>                <div class="image-caption">切片4</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190526/j4EXrVAwdfOF.gif" alt="切片5" title>                </div>                <div class="image-caption">切片5</div>            </figure><h1 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h1><p>首先对图片进行预处理，请参考我的<a href="https://www.mrleecn.cn/2019/05/22/yzm-thinking/" target="_blank" rel="noopener">另一篇文章</a>。然后再对验证码进行切片，切片包括：</p><ul><li><strong>纵向切片</strong>（去除字符左右的空白区域）</li><li><strong>横向切片</strong>（去除字符上下的空白区域）</li></ul><p>纵向切片从验证码图片的左端开始，依次遍历每列，<strong>寻找第一个含有黑像素的列</strong>，作为该字符切片的<strong>起始端</strong>。然后继续遍历，找到<strong>第一个不含黑像素的列</strong>，作为该字符切片的<strong>结束端</strong>（躺平的<code>i</code>、<code>j</code>只要尾部不要首部）。直到遍历完整张图片，即找到全部字符的切片位置，然后对图片进行切片，将每个字符切片保存为单独的图片。<strong>时间复杂度为O(n).</strong></p><p>横向切片采用<strong>递归</strong>的方式。从图片中间的一行开始遍历。如果中间一行有黑色像素，表示中间一行在字符中间。由中间向两边遍历，找到字符的<strong>起始端start</strong>和<strong>结束端end</strong>。如果中间一行没有黑像素，于是分别在图片的上、下半部分继续采用递归的方式继续寻找。直到找到字符的两端（如果整张图片全为白色，则递归跳出的<strong>判断语句为start&gt;=end</strong>），然后进行切片，实现最终效果。<strong>时间复杂度为O(logn)</strong>。</p><h1 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h1><h2 id="1、纵向切片"><a href="#1、纵向切片" class="headerlink" title="1、纵向切片"></a>1、纵向切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_col</span><span class="params">(self, img_path)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    验证码纵向处理</span></span><br><span class="line"><span class="string">    :param img_path:验证码路径</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    image = Image.open(img_path)</span><br><span class="line">    <span class="comment"># 纵向切</span></span><br><span class="line">    letters = self.split_col(image)</span><br><span class="line">    <span class="comment"># 保存各个切片图片</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(letters)):</span><br><span class="line">            im_spilt = image.crop((letters[j][<span class="number">0</span>], <span class="number">0</span>, letters[j][<span class="number">1</span>], image.size[<span class="number">1</span>]))</span><br><span class="line">            new_path = self.img_dir + <span class="string">'&#123;0&#125;.gif'</span>.format(j)</span><br><span class="line">            im_spilt.save(new_path)</span><br><span class="line">            self.captcha_firstsplit_paths.append(new_path)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_col</span><span class="params">(self, image)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    寻找验证码纵向的切割边界</span></span><br><span class="line"><span class="string">    :param image: 验证码对象</span></span><br><span class="line"><span class="string">    :return: 每个字符的起始横坐标和结束横坐标的list</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    inletter = <span class="literal">False</span>        <span class="comment"># 标记当前列是否在字符内，False表示不在字符内，True表示在字符内</span></span><br><span class="line">    foundletter = <span class="literal">False</span>     <span class="comment"># 标记是否找到字符，False表示目前没找到字符，True表示已经找到字符</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = image.size[<span class="number">0</span>]</span><br><span class="line">    letters = []            <span class="comment"># 记录每个字符的起始坐标和结束坐标</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(image.size[<span class="number">0</span>]):          <span class="comment"># 按列查找</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(image.size[<span class="number">1</span>]):</span><br><span class="line">            pix = image.getpixel((x, y))</span><br><span class="line">            <span class="keyword">if</span> pix != <span class="number">255</span>:      <span class="comment"># 不为白色，表示进入字符</span></span><br><span class="line">                inletter = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> foundletter == <span class="literal">False</span> <span class="keyword">and</span> inletter == <span class="literal">True</span>:   <span class="comment"># 刚进入字符，将foundletter标记为True</span></span><br><span class="line">            foundletter = <span class="literal">True</span></span><br><span class="line">            start = x</span><br><span class="line">        <span class="keyword">if</span> foundletter == <span class="literal">True</span> <span class="keyword">and</span> inletter == <span class="literal">False</span>:   <span class="comment"># 当前列已经出了字符，并将起始位置</span></span><br><span class="line">            foundletter = <span class="literal">False</span>                         <span class="comment"># 将foundletter重置为False</span></span><br><span class="line">            end = x</span><br><span class="line">            <span class="keyword">if</span> end - start &gt;= <span class="number">4</span>:                        <span class="comment"># 如果字符切片宽度大于等于4像素，则记录起始终止位置；</span></span><br><span class="line">                letters.append((start, end))            <span class="comment"># 否则，认为当前切片为图片的噪点，或平躺的i、j首部（不具备唯一性，识别用不到，故剔除）</span></span><br><span class="line">        inletter = <span class="literal">False</span>                                <span class="comment"># 重置inletter为False</span></span><br><span class="line">    <span class="comment"># 最后一个字符贴边</span></span><br><span class="line">    <span class="keyword">if</span> start != letters[<span class="number">-1</span>][<span class="number">0</span>]:                         <span class="comment"># 如果当前的start和letters中最后一个start不等，后面还有字符，即字符贴边</span></span><br><span class="line">        letters.append((start, image.size[<span class="number">0</span>]))          <span class="comment"># 最后一个字符的结束位置，即图片的宽度</span></span><br><span class="line">    <span class="keyword">return</span> letters</span><br></pre></td></tr></table></figure><h2 id="2、横向切片"><a href="#2、横向切片" class="headerlink" title="2、横向切片"></a>2、横向切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_row</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    单个字符横向处理</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> captcha <span class="keyword">in</span> self.captcha_firstsplit_paths:</span><br><span class="line">        img = Image.open(captcha)</span><br><span class="line">        <span class="comment"># 横向切</span></span><br><span class="line">        top, botton = self.split_row(img, <span class="number">0</span>, img.size[<span class="number">1</span>]<span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># 切割，并保存文件</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            im_spilt = img.crop((<span class="number">0</span>, top, img.size[<span class="number">0</span>], botton))</span><br><span class="line">            new_path = <span class="string">'&#123;0&#125;split__&#123;1&#125;'</span>.format(self.img_dir, captcha.split(<span class="string">'/'</span>)[<span class="number">-1</span>])</span><br><span class="line">            im_spilt.save(new_path)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_row</span><span class="params">(self, image, start, end)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    寻找验证码横向的切割边界</span></span><br><span class="line"><span class="string">    :param image:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    inletter = <span class="literal">False</span>        <span class="comment"># 表示当前在字符内部</span></span><br><span class="line">    <span class="keyword">if</span> start &gt;= end:        <span class="comment"># 递归出口</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    mid = int((end - start) / <span class="number">2</span>)    <span class="comment"># 图片中间行</span></span><br><span class="line"></span><br><span class="line">    inletter = self.is_row_have_black(image, mid)  <span class="comment"># 中间一行出现黑像素表示进入字符中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inletter == <span class="literal">True</span>:  <span class="comment"># 在字符中间</span></span><br><span class="line"></span><br><span class="line">        outletter_up = <span class="literal">False</span>            <span class="comment"># 是否出字符（上半部分），False表示没出字符，True表示已经出字符</span></span><br><span class="line">        outletter_down = <span class="literal">False</span>          <span class="comment"># 是否出字符（下半部分），False表示没出字符，True表示已经出字符</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, int(mid) + <span class="number">2</span>):  <span class="comment"># 向两边发散，考虑到图片高度为偶数，从中间移动mid的距离不足以到达图片边界，</span></span><br><span class="line">                                            <span class="comment"># 特此将移动距离mid+2</span></span><br><span class="line">            <span class="comment"># 向上</span></span><br><span class="line">            <span class="keyword">if</span> outletter_up == <span class="literal">False</span>:</span><br><span class="line"></span><br><span class="line">                row_have_black = self.is_row_have_black(image, mid - i)  <span class="comment"># 上i行是否有黑像素</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> row_have_black <span class="keyword">is</span> <span class="literal">False</span>:  <span class="comment"># 向上第一次全白的行</span></span><br><span class="line">                    top = mid - i + <span class="number">1</span></span><br><span class="line">                    outletter_up = <span class="literal">True</span>     <span class="comment"># 已经出字符</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> mid - i == <span class="number">0</span>:  <span class="comment"># 贴顶</span></span><br><span class="line">                    top = <span class="number">0</span></span><br><span class="line">                    outletter_up = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 向下</span></span><br><span class="line">            <span class="keyword">if</span> outletter_down == <span class="literal">False</span>:</span><br><span class="line"></span><br><span class="line">                row_have_black = self.is_row_have_black(image, mid + i)  <span class="comment"># 下i行是否有黑像素</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> row_have_black <span class="keyword">is</span> <span class="literal">False</span>:  <span class="comment"># 向下的第一行全白，下到底</span></span><br><span class="line">                    botton = mid + i</span><br><span class="line">                    outletter_down = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> mid + i + <span class="number">1</span> == image.size[<span class="number">1</span>]:  <span class="comment"># 贴底</span></span><br><span class="line">                    botton = mid + i + <span class="number">1</span></span><br><span class="line">                    outletter_down = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> outletter_up == <span class="literal">True</span> <span class="keyword">and</span> outletter_down == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">if</span> botton - top &gt;= <span class="number">4</span>:  <span class="comment"># 如果宽度大于等于4像素，返回top,botton</span></span><br><span class="line">                    <span class="keyword">return</span> top, botton</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span>  <span class="comment"># 如果宽度小于4像素，返回None，None（即i、j的首部的点）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不在字符中间，即字符位于上半部分或下半部分，或是i、j首位分离</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        top_up, botton_up = self.split_row(image, start, mid - <span class="number">1</span>)</span><br><span class="line">        top_down, botton_down = self.split_row(image, mid + <span class="number">1</span>, end)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> top_up != <span class="literal">None</span> <span class="keyword">and</span> botton_up != <span class="literal">None</span>:  <span class="comment"># 字符在上半部分或i、j尾部在上半部分</span></span><br><span class="line">            <span class="keyword">return</span> top_up, botton_up</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 字符在上半部分或i、j头部在上半部分，尾部在下半部分</span></span><br><span class="line">            <span class="keyword">return</span> top_down, botton_down</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_row_have_black</span><span class="params">(self, image, row)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    判断该行是否有黑像素</span></span><br><span class="line"><span class="string">    :param image: 图片对象</span></span><br><span class="line"><span class="string">    :param column: 图片的行</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(image.size[<span class="number">0</span>]):</span><br><span class="line">        pix = image.getpixel((i, row))  <span class="comment"># 获取图片某点的像素值</span></span><br><span class="line">        <span class="keyword">if</span> pix != <span class="number">1</span>:    <span class="comment"># 不为白</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;验证码图片如下图所示：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div cla
      
    
    </summary>
    
    
      <category term="Python" scheme="https://mrleecn.cn/tags/Python/"/>
    
      <category term="爬虫" scheme="https://mrleecn.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="验证码识别" scheme="https://mrleecn.cn/tags/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>位运算技巧总结（python版）</title>
    <link href="https://mrleecn.cn/2019/05/19/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>https://mrleecn.cn/2019/05/19/位运算/</id>
    <published>2019-05-19T01:44:54.000Z</published>
    <updated>2019-05-24T15:33:45.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-不用临时变量交换两个数"><a href="#1-不用临时变量交换两个数" class="headerlink" title="1.  不用临时变量交换两个数"></a>1.  不用临时变量交换两个数</h3><p><strong>异或运算</strong></p><ul><li>两个相同的数<strong>异或</strong>为0 即n ^ n = 0；</li><li>任何数与0异或为它本身，即n ^ 0 = n。</li><li>支持<strong>交换律、结合律</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b<span class="comment"># （1）</span></span><br><span class="line">b = a ^ b<span class="comment"># （2）</span></span><br><span class="line">a = a ^ b<span class="comment"># （3）</span></span><br></pre></td></tr></table></figure><p>解释如下：</p><p>把（1）中的 <code>a</code> 带入（2）中，则有</p><p><code>b = a ^ b = (a ^ b) ^ b = a ^ (b ^ b) = a ^ 0 = a</code></p><p>同理将（1）、（2）的结果带入（3）中，则有</p><p><code>a = a ^ b = (a ^ b) ^ a = (a ^ a) ^ b = 0 ^ b = b</code> </p><h3 id="2-判断一个数的奇偶性"><a href="#2-判断一个数的奇偶性" class="headerlink" title="2. 判断一个数的奇偶性"></a>2. 判断一个数的奇偶性</h3><p><strong>与运算</strong></p><ul><li>相同为0，不同为1</li></ul><p>判断一个数n是偶数还是奇数，只需要判断n的二进制最后一位是1还是0。是0表示是偶数，是1表示是奇数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if n &amp; 1 == 1: # n为奇数</span><br></pre></td></tr></table></figure><h3 id="3-乘2-除2"><a href="#3-乘2-除2" class="headerlink" title="3. 乘2/除2"></a>3. 乘2/除2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n &lt;&lt; <span class="number">1</span><span class="comment"># 左移一位，表示乘2</span></span><br><span class="line">n &gt;&gt; <span class="number">1</span> <span class="comment"># 右移一位，表示除2</span></span><br></pre></td></tr></table></figure><h3 id="4-取两个数中的最大值"><a href="#4-取两个数中的最大值" class="headerlink" title="4.  取两个数中的最大值"></a>4.  取两个数中的最大值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> b &amp; ((a-b) &gt;&gt; <span class="number">31</span>) | a &amp; (~(a-b) &gt;&gt; <span class="number">31</span>)</span><br></pre></td></tr></table></figure><p><strong>解释如下：</strong></p><ol><li><code>b &amp; ((a-b) &gt;&gt; 31)</code>其中<code>(a-b) &gt;&gt; 31</code> 表示取<code>(a-b)</code>的符号位。</li></ol><p>当<code>b &lt;= a</code>时，符号位为0，<code>b &amp; 0 = 0</code></p><p>当<code>b &gt; a</code>时，符号位为-1。<code>b &amp; -1 = b</code></p><p>即当<code>b &gt; a</code>时结果为b，否则结果为0。</p><ol start="2"><li><code>a &amp; (~(a-b) &gt;&gt; 31)</code>其中<code>(~(a-b) &gt;&gt; 31)</code> 表示对<code>(a-b)</code>的符号位<strong>取反</strong>。</li></ol><p>当<code>a &gt;= b</code>时，取反结果为-1，<code>a &amp; -1 = a</code></p><p>当<code>a &lt; b</code>时，取反结果为0，<code>a &amp; 0 = 0</code></p><p>即当<code>a &gt;= b</code>时结果为a，否则结果为0。</p><ol start="3"><li>最后对前两步结果进行<code>或</code>运算，因为前两步的结果中一定有一个为0，另一个非0（即最大值）。所以经过<code>或</code>运算后结果非0（即为最大值）。</li></ol><h3 id="5-取两个数中的最小值"><a href="#5-取两个数中的最小值" class="headerlink" title="5.  取两个数中的最小值"></a>5.  取两个数中的最小值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a &amp; ((a-b) &gt;&gt; <span class="number">31</span>) | b &amp; (~(a-b) &gt;&gt; <span class="number">31</span>)</span><br></pre></td></tr></table></figure><h3 id="6-取绝对值"><a href="#6-取绝对值" class="headerlink" title="6.  取绝对值"></a>6.  取绝对值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (n ^ (n &gt;&gt; <span class="number">31</span>) - (n &gt;&gt; <span class="number">31</span>))</span><br></pre></td></tr></table></figure><h3 id="7-找出只出现一次的数字"><a href="#7-找出只出现一次的数字" class="headerlink" title="7.  找出只出现一次的数字"></a>7.  找出只出现一次的数字</h3><blockquote><p>在一组整型数据中，只有一个数字出现了一次，其余数字都出现了两次。找出那个只出现一次的数字。</p></blockquote><p>由异或运算的特性可知：<strong>两个相同数字进行异或结果为0；一个数和0异或结果为它本身；且异或支持交换律和结合律</strong>。所以只需要对全部的数字进行异或运算，结果就是只出现一次的数字。如<code>l = [1,2,1,0,0]</code></p><p><code>1 ^ 2 ^ 1 ^ 0 ^ 0 = (1 ^ 1) ^ (0 ^ 0) ^ 2 = 0 ^ 0 ^ 2 = 2</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_only</span><span class="params">(l)</span>:</span></span><br><span class="line">    tmp = l[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(l)<span class="number">-1</span>):</span><br><span class="line">        tmp ^= l[i]</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-不用临时变量交换两个数&quot;&gt;&lt;a href=&quot;#1-不用临时变量交换两个数&quot; class=&quot;headerlink&quot; title=&quot;1.  不用临时变量交换两个数&quot;&gt;&lt;/a&gt;1.  不用临时变量交换两个数&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;异或运算&lt;/strong&gt;&lt;
      
    
    </summary>
    
    
      <category term="Python" scheme="https://mrleecn.cn/tags/Python/"/>
    
      <category term="编程技巧" scheme="https://mrleecn.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Git使用（二）</title>
    <link href="https://mrleecn.cn/2019/05/17/git%E4%BD%BF%E7%94%A8%E4%BA%8C/"/>
    <id>https://mrleecn.cn/2019/05/17/git使用二/</id>
    <published>2019-05-17T01:10:50.000Z</published>
    <updated>2019-06-22T02:52:27.633Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本笔记摘抄自<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a>，仅记录自己学习过程，侵删。</p></blockquote><h3 id="工作区与暂存区"><a href="#工作区与暂存区" class="headerlink" title="工作区与暂存区"></a>工作区与暂存区</h3><p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</p><h4 id="工作区（Working-Directory）"><a href="#工作区（Working-Directory）" class="headerlink" title="工作区（Working Directory）"></a>工作区（Working Directory）</h4><p>就是你在电脑里能看到的目录，比如我的<code>learngit</code>文件夹就是一个工作区</p><h4 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a>版本库（Repository）</h4><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190524/3RWw0c55yLWU.gif" alt="git-repo" title>                </div>                <div class="image-caption">git-repo</div>            </figure><p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到<strong>暂存区</strong>；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到<strong>当前分支</strong>。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><p>继续修改，先对<code>readme.txt</code>做个修改，比如加上一行内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br></pre></td></tr></table></figure><p>然后，在工作区新增一个<code>LICENSE</code>文本文件（内容随便写）。</p><p>先用<code>git status</code>查看一下状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">LICENSE</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>Git非常清楚地告诉我们，<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p><p>现在，使用两次命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">new file:   LICENSE</span><br><span class="line">modified:   readme.txt</span><br></pre></td></tr></table></figure><p>现在，暂存区的状态就变成这样了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://abc.mrleecn.cn/blog/20190524/3RWw0c55yLWU.gif" alt="git-stage" title>                </div>                <div class="image-caption">git-stage</div>            </figure><p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;understand how stage works&quot;</span><br><span class="line">[master e43a48b] understand how stage works</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 LICENSE</span><br></pre></td></tr></table></figure><p>现在版本库变成了这样，暂存区就没有任何内容了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://prwhphxqa.bkt.clouddn.com/blog/20190524/tb40DoLRc1KX.jpg?imageslim" alt="git-stage-after-commit" title>                </div>                <div class="image-caption">git-stage-after-commit</div>            </figure><hr><p>修改readme.txt。你在<code>readme.txt</code>中添加了一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">My stupid boss still prefers SVN.</span><br></pre></td></tr></table></figure><p>在你准备提交前，一杯咖啡起了作用，你猛然发现了<code>stupid boss</code>可能会让你丢掉这个月的奖金！</p><p>既然错误发现得很及时，就可以很容易地纠正它。有<strong>两种方法</strong>：</p><ol><li><strong>你可以手动删去最后一行</strong></li><li><strong>你可以使用git命令进行删除</strong></li></ol><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>用<code>git status</code>查看一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br></pre></td></tr></table></figure><p>你可以发现，Git会告诉你</p><ul><li><strong><code>git checkout -- file</code>可以丢弃工作区的修改</strong>：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p>如果你还<strong>没使用<code>git add</code></strong><code>把readme.txt</code>文件添加到暂存区，那么可以使用<code>git checkout -- file</code>将<strong>工作区</strong>的修改全部撤销。</p><ul><li><strong><code>git reset HEAD &lt;file&gt;</code>可以丢弃暂存区的修改</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       LICENSE.txt</span><br><span class="line">M       readme.txt</span><br></pre></td></tr></table></figure><p>如果你已经<strong>使用<code>git add</code></strong><code>把readme.txt</code>文件<strong>添加到暂存区</strong>，那么可以使用<code>git reset HEAD &lt;file&gt;</code>将<strong>暂存区</strong>的修改全部撤销。然后再使用<code>git checkout -- file</code>撤销<strong>工作区</strong>的修改。</p><hr><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>添加一个新文件<code>test.txt</code>到Git并且提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;add test.txt&quot;</span><br><span class="line">[master b84166e] add test.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br></pre></td></tr></table></figure><p>然后，手动删除<strong>工作区</strong>的<code>test.txt</code>文件。</p><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">deleted:    test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>这时候，出现两种情况：</p><h4 id="情况1：文件删错了，要恢复文件"><a href="#情况1：文件删错了，要恢复文件" class="headerlink" title="情况1：文件删错了，要恢复文件"></a>情况1：文件删错了，要恢复文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure><p>现在，文件又在工作区出现了。</p><h4 id="情况2：删的没错，清除版本库刚提交的test-txt"><a href="#情况2：删的没错，清除版本库刚提交的test-txt" class="headerlink" title="情况2：删的没错，清除版本库刚提交的test.txt"></a>情况2：删的没错，清除版本库刚提交的<code>test.txt</code></h4><p><strong>方法一：</strong>使用<code>git rm</code>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">rm &apos;test.txt&apos;</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;remove test.txt&quot;</span><br><span class="line">[master d46f35e] remove test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure><p>现在，文件就从版本库中被删除了。</p><p><strong>方法二：</strong>使用<code>git reset HEAD &lt;file&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD test.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本笔记摘抄自&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git教程&lt;/a&gt;，仅记录自己学习过程，侵删。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Git" scheme="https://mrleecn.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>time模块和datetime模块常见用法总结</title>
    <link href="https://mrleecn.cn/2019/05/16/time%E6%A8%A1%E5%9D%97%E5%92%8Cdatetime%E6%A8%A1%E5%9D%97%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://mrleecn.cn/2019/05/16/time模块和datetime模块常见用法总结/</id>
    <published>2019-05-16T07:41:50.000Z</published>
    <updated>2019-05-24T15:33:45.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure><h4 id="1-获取当前时间"><a href="#1-获取当前时间" class="headerlink" title="1. 获取当前时间"></a>1. 获取当前时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>localtime = time.localtime()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>localtime</span><br><span class="line">time.struct_time(tm_year=<span class="number">2019</span>, tm_mon=<span class="number">4</span>, tm_mday=<span class="number">25</span>, tm_hour=<span class="number">16</span>, tm_min=<span class="number">28</span>, tm_sec=<span class="number">27</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">115</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 2019年4月25日 16时28分27秒，本周的第3天（0是周一），本年的第115天，不是夏令时。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(localtime)<span class="comment"># 时间元组类型</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">time</span>.<span class="title">struct_time</span>'&gt;</span></span><br></pre></td></tr></table></figure><h5 id="时间元组格式"><a href="#时间元组格式" class="headerlink" title="时间元组格式"></a>时间元组格式</h5><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">属性</th><th style="text-align:left">值</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">tm_year</td><td style="text-align:left">2008</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">tm_mon</td><td style="text-align:left">1 到 12</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">tm_mday</td><td style="text-align:left">1 到 31</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">tm_hour</td><td style="text-align:left">0 到 23</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">tm_min</td><td style="text-align:left">0 到 59</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">tm_sec</td><td style="text-align:left">0 到 61 (60或61 是闰秒)</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">tm_wday</td><td style="text-align:left">0到6 (0是周一)</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">tm_yday</td><td style="text-align:left">一年中的第几天，1 到 366</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">tm_isdst</td><td style="text-align:left">是否为夏令时，值有：1(夏令时)、0(不是夏令时)、-1(未知)，默认 -1</td></tr></tbody></table><h4 id="2-分别获取当前年、月、日、今年第几天-等信息"><a href="#2-分别获取当前年、月、日、今年第几天-等信息" class="headerlink" title="2. 分别获取当前年、月、日、今年第几天 等信息"></a>2. 分别获取当前年、月、日、今年第几天 等信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>year = localtime[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>month = localtime[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>day = localtime[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>year,month,day</span><br><span class="line">(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">25</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wday = localtime[<span class="number">6</span>] <span class="comment"># 本周第几天</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>yday = localtime[<span class="number">7</span>] <span class="comment"># 今年第几天</span></span><br><span class="line"><span class="number">115</span></span><br></pre></td></tr></table></figure><h4 id="3-获取当前时间戳"><a href="#3-获取当前时间戳" class="headerlink" title="3.获取当前时间戳"></a>3.获取当前时间戳</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time.time() </span><br><span class="line"><span class="number">1556182332.531831</span></span><br></pre></td></tr></table></figure><h4 id="4-格式化时间（带时间戳）"><a href="#4-格式化时间（带时间戳）" class="headerlink" title="4. 格式化时间（带时间戳）"></a>4. 格式化时间（带时间戳）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>localtime.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,x)</span><br><span class="line"><span class="string">'2019-04-25 16:28:27'</span></span><br></pre></td></tr></table></figure><h5 id="python中时间日期格式化符号："><a href="#python中时间日期格式化符号：" class="headerlink" title="python中时间日期格式化符号："></a>python中时间日期格式化符号：</h5><ul><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12）</li><li>%M 分钟数（00=59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身</li></ul><h4 id="5-推迟调用线程的运行"><a href="#5-推迟调用线程的运行" class="headerlink" title="5. 推迟调用线程的运行"></a>5. 推迟调用线程的运行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.sleep(<span class="number">30</span>) <span class="comment"># 推迟30秒</span></span><br></pre></td></tr></table></figure><h2 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h2><h4 id="1-获取当前时间-1"><a href="#1-获取当前时间-1" class="headerlink" title="1. 获取当前时间"></a>1. 获取当前时间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(datetime.datetime.now())</span><br><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-25</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">02.275448</span></span><br></pre></td></tr></table></figure><h4 id="2-将时间戳转换成日期"><a href="#2-将时间戳转换成日期" class="headerlink" title="2.将时间戳转换成日期"></a>2.将时间戳转换成日期</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(datetime.date.fromtimestamp(<span class="number">1556182332.531831</span>))</span><br><span class="line"><span class="number">2019</span><span class="number">-04</span><span class="number">-25</span></span><br></pre></td></tr></table></figure><h4 id="3-时间运算"><a href="#3-时间运算" class="headerlink" title="3.时间运算"></a>3.时间运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前时间+3天</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.now() + datetime.timedelta(+<span class="number">3</span>)</span><br><span class="line">datetime.datetime(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">969413</span>)</span><br><span class="line"><span class="comment"># 当前时间-3天</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.now() + datetime.timedelta(<span class="number">-3</span>)</span><br><span class="line">datetime.datetime(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">753718</span>)</span><br><span class="line"><span class="comment"># 当前时间+3小时</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.now() + datetime.timedelta(hours=<span class="number">3</span>)</span><br><span class="line">datetime.datetime(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">42</span>, <span class="number">442473</span>)</span><br><span class="line"><span class="comment"># 当前时间+30分钟</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.now() + datetime.timedelta(minutes=<span class="number">30</span>)</span><br><span class="line">datetime.datetime(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">47</span>, <span class="number">2</span>, <span class="number">610058</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;time模块&quot;&gt;&lt;a href=&quot;#time模块&quot; class=&quot;headerlink&quot; title=&quot;time模块&quot;&gt;&lt;/a&gt;time模块&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
      <category term="Python" scheme="https://mrleecn.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Git使用（一）</title>
    <link href="https://mrleecn.cn/2019/05/15/git%E4%BD%BF%E7%94%A8%E4%B8%80/"/>
    <id>https://mrleecn.cn/2019/05/15/git使用一/</id>
    <published>2019-05-15T13:06:50.000Z</published>
    <updated>2019-05-24T15:33:45.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本笔记摘抄自<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a>，仅记录自己学习过程，侵删。</p></blockquote><p>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><h3 id="创建一个版本库"><a href="#创建一个版本库" class="headerlink" title="创建一个版本库"></a>创建一个版本库</h3><p>创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br><span class="line">/Users/michael/learngit</span><br></pre></td></tr></table></figure><p><code>pwd</code>命令用于显示当前目录。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>第二步，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/michael/learngit/.git/</span><br></pre></td></tr></table></figure><p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><h3 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h3><p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p><p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p><p>现在我们编写一个<code>readme.txt</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>一定要放到<code>learngit</code>目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p><p>和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。</p><h4 id="第一步：-用命令git-add告诉Git，把文件添加到仓库："><a href="#第一步：-用命令git-add告诉Git，把文件添加到仓库：" class="headerlink" title="第一步： 用命令git add告诉Git，把文件添加到仓库："></a>第一步： 用命令<code>git add</code>告诉Git，把文件添加到仓库：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><h4 id="第二步：用命令git-commit告诉Git，把文件提交到仓库："><a href="#第二步：用命令git-commit告诉Git，把文件提交到仓库：" class="headerlink" title="第二步：用命令git commit告诉Git，把文件提交到仓库："></a>第二步：用命令<code>git commit</code>告诉Git，把文件提交到仓库：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m &quot;add 3 files.&quot;</span><br></pre></td></tr></table></figure><p>修改readme.txt文件，改成如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><h3 id="查看仓库当前状态"><a href="#查看仓库当前状态" class="headerlink" title="查看仓库当前状态"></a>查看仓库当前状态</h3><p>运行<code>git status</code>命令看看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，<code>readme.txt</code>被修改过了，但还没有准备提交的修改。</p><h3 id="查看某个文件修改情况"><a href="#查看某个文件修改情况" class="headerlink" title="查看某个文件修改情况"></a>查看某个文件修改情况</h3><p>虽然Git告诉我们<code>readme.txt</code>被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的<code>readme.txt</code>，所以，需要用<code>git diff</code>这个命令看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git diff readme.txt </span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 46d49bf..9247db6 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Git is a version control system.</span><br><span class="line">+Git is a distributed version control system.</span><br><span class="line"> Git is free software.</span><br></pre></td></tr></table></figure><p><code>git diff</code>顾名思义就是查看difference，显示的格式正是Unix通用的diff格式</p><p>知道了对<code>readme.txt</code>作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是<code>git add</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><p>同样没有任何输出。在执行第二步<code>git commit</code>之前，我们再运行<code>git status</code>看看当前仓库的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br></pre></td></tr></table></figure><p><code>git status</code>告诉我们，将要被提交的修改包括<code>readme.txt</code>，下一步，就可以放心地提交了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;add distributed&quot;</span><br><span class="line">[master e475afc] add distributed</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>提交后，我们再用<code>git status</code>命令看看仓库的当前状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。</p><p>每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为<code>commit</code>。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p><h3 id="查看历史修改"><a href="#查看历史修改" class="headerlink" title="查看历史修改"></a>查看历史修改</h3><p>在Git中，我们用<code>git log</code>命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br><span class="line">e475afc93c209a690c39c13a46716e8fa000c366 add distributed</span><br><span class="line">eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</span><br></pre></td></tr></table></figure><p>你看到的一大串类似<code>1094adb...</code>的是<code>commit id</code>（版本号），和SVN不一样，Git的<code>commit id</code>不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的<code>commit id</code>和我的肯定不一样，以你自己的为准。为什么<code>commit id</code>需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p><p>每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>现在，我们要把当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，就可以使用<code>git reset</code>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at e475afc add distributed</span><br></pre></td></tr></table></figure><p><code>--hard</code>参数有啥意义？这个后面再讲，现在你先放心使用。</p><p>还可以继续回退到上一个版本<code>wrote a readme file</code>，不过且慢，然我们用<code>git log</code>再看看现在版本库的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -&gt; master)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p>最新的那个版本<code>append GPL</code>已经看不到了！想再回去已经回不去了，肿么办？</p><p>办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个<code>append GPL</code>的<code>commit id</code>是<code>1094adb...</code>，于是就可以指定回到未来的某个版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 1094a</span><br><span class="line">HEAD is now at 83b0afe append GPL</span><br></pre></td></tr></table></figure><p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   └──&gt; ○ append GPL</span><br><span class="line">        │</span><br><span class="line">        ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure><p>改为指向<code>add distributed</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   │    ○ append GPL</span><br><span class="line">   │    │</span><br><span class="line">   └──&gt; ○ add distributed</span><br><span class="line">        │</span><br><span class="line">        ○ wrote a readme file</span><br></pre></td></tr></table></figure><p>然后顺便把工作区的文件更新了。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p><h3 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h3><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？</p><p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到<code>append GPL</code>的commit id。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><p>终于舒了口气，从输出可知，<code>append GPL</code>的commit id是<code>1094adb</code>，现在，你又可以乘坐时光机回到未来了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本笔记摘抄自&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git教程&lt;/a&gt;，仅记录自己学习过程，侵删。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Git" scheme="https://mrleecn.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>【转载】写给年轻程序员的10点启示</title>
    <link href="https://mrleecn.cn/2019/05/14/%E5%86%99%E7%BB%99%E5%B9%B4%E8%BD%BB%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8410%E7%82%B9%E5%90%AF%E7%A4%BA/"/>
    <id>https://mrleecn.cn/2019/05/14/写给年轻程序员的10点启示/</id>
    <published>2019-05-14T12:24:47.000Z</published>
    <updated>2019-05-24T15:33:45.029Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转载自：https:<span class="comment">//segmentfault.com/a/1190000013972995， 侵删</span></span><br></pre></td></tr></table></figure><h2 id="写给年轻程序员的10点启示"><a href="#写给年轻程序员的10点启示" class="headerlink" title="写给年轻程序员的10点启示"></a>写给年轻程序员的10点启示</h2><h3 id="1-正确认识自己"><a href="#1-正确认识自己" class="headerlink" title="1. 正确认识自己"></a>1. 正确认识自己</h3><p>相比码农、程序猿、软件工程师、张江男、屌丝程序员等等这些网络词汇，当你把自己看作是一个屌丝程序员的话，那你也可能就是那个衣食不愁，但整天浑浑噩噩、无所追求的屌丝。我更愿意用技匠这个词来形容程序员，就像我给自己起的花名一样。程序员应该是那些不断追求更高技术，并有着自己产品梦的工匠。当你通过对自己技术不断打磨，一次又一次做出那些优秀产品的时候，你会发现自己不再是他人口中的码农或是屌丝，而更多被称为了大师、大神，而受到大家的尊重。</p><h3 id="2-比一般人更加努力"><a href="#2-比一般人更加努力" class="headerlink" title="2. 比一般人更加努力"></a>2. 比一般人更加努力</h3><p>优秀的程序员往往会被同天才或高智商的人联系在一起，但我想告诉你，你周围所看到的那些天才（身边的优秀程序员）只是在你没看到的时候花了更多时间工作或者学习而已，当你也坚持这么做时，你也会变得和他们一样优秀。</p><h3 id="3-适时建立个人权威"><a href="#3-适时建立个人权威" class="headerlink" title="3. 适时建立个人权威"></a>3. 适时建立个人权威</h3><p>建立个人权威，这能让其他人看到你的不同之处，并为你在公司或团队内部构建起良好的影响力。当然，这一切的前提是你通过不断努力积累了自己的实力，并在恰当的时候去展现它。</p><h3 id="4-遵循最佳实践"><a href="#4-遵循最佳实践" class="headerlink" title="4. 遵循最佳实践"></a>4. 遵循最佳实践</h3><p>技术更新太快，作为程序员，如何才能适应这种变化呢？其实，就像每年都会有新的流行设计趋势，然而设计的本质和原则却始终不变一样。这些最佳实践或由此衍生出来的框架、工具都是那些富有经验的程序员通过大量实践，总结出来的最优秀的软件开发思想。通过理解和对它们的有效实践，能够让你站到前人的肩膀之上，对软件开发本身获得更深入的理解和认识。</p><h3 id="5-保持好奇心并乐于探索新的事物"><a href="#5-保持好奇心并乐于探索新的事物" class="headerlink" title="5. 保持好奇心并乐于探索新的事物"></a>5. 保持好奇心并乐于探索新的事物</h3><p>优秀的程序员们也往往非常乐于探索那些看似与工作无关的技术。比如，做后端的程序员去学习前端的技能，前端工程师则去学习UI设计，等等，这些虽不会让他们成为那一个领域的专家，但技术往往是相通的，当你在探索这些新鲜事物的同时，你会发现你原有的技能也得到了提升。</p><h3 id="6-抛开代码与人沟通"><a href="#6-抛开代码与人沟通" class="headerlink" title="6. 抛开代码与人沟通"></a>6. 抛开代码与人沟通</h3><p>“紧盯着电脑屏幕，不断敲击键盘，目光有些呆滞。”这可能是程序员给人的印象。而我所看到的那些优秀的程序员却都不是这样的，他们往往兴趣广泛，并且都乐于与人沟通交流。程序员们很容易会忽视与人的沟通，这其实对他们的职业生涯发展是不利的。我很支持那些年轻的程序员们坚持去走技术路线，但这不应该成为你排斥与人沟通的理由。你需要与人沟通来获得他人的帮助；你需要与人沟通来建立良好的工作关系；当你的能力不断提升，被赋予更多职责时，你更需要与人沟通来管理好自己的团队，以及与老板或客户进行有效的沟通等。</p><h3 id="7-要为优秀的人工作"><a href="#7-要为优秀的人工作" class="headerlink" title="7. 要为优秀的人工作"></a>7. 要为优秀的人工作</h3><p>环境对一个人的影响是巨大的，而最可怕的是当你身处其中时，很难意识到你正在变得越来越糟。我之前带过一些不错的程序员，他们中的一些人去了一些整体氛围或环境不是太好的公司。过了一段时间后，再次与他们碰面聊天时，我发现他们的思维、观点相较之前并没有提升，有些甚至反而退步了。</p><h3 id="8-生活、睡眠、旅行"><a href="#8-生活、睡眠、旅行" class="headerlink" title="8. 生活、睡眠、旅行"></a>8. 生活、睡眠、旅行</h3><p>我希望每个程序员都能明白工作、技术、写代码这些并不是你存在的意义，而生活才是，你需要懂得生活，并且学会生活。</p><p>生活：尝试有节制和有规律的生活，程序员生涯绝不是一次冲刺，而更像一场马拉松。</p><p>睡眠：很多人觉得睡眠是弱者的表现，他们往往会长时间熬夜，其实我觉得这是这一种恶性循环，反而会使你的工作效率变的更低。</p><p>旅行：去任何一个新的地方都可以称之为旅行，让你发现和感受新的东西，而这些是从电脑屏幕上无法获得的。</p><h3 id="9-相信自己的天赋和创造力"><a href="#9-相信自己的天赋和创造力" class="headerlink" title="9. 相信自己的天赋和创造力"></a>9. 相信自己的天赋和创造力</h3><p>每个人的身上都有属于他自己的天赋和创造力，但它们也绝不是与生俱来的，你需要在生活中不断地培养和发掘它们。下面是我觉得一些行之有效的方法。</p><p>阅读优秀的书籍：好的想法绝不是凭空产生的，尝试从书中寻找那些能激发你创意和灵感的优秀内容。</p><p>记录和收集：尝试用一个小本子，将你转瞬即逝的好想法记录下来，它们可能并不直接有效，但下一个更好的想法可能就是从这些你记录下来的想法中产生的。</p><p>尝试动手：光有好的想法是不够的，你需要成为一个有工匠精神的人，通过亲自动手去尝试和实践，你会不断从中得到新的创造力。</p><h3 id="10-如果上面提到的其他建议都对你无效，那么就请坚持第2点吧，因为它将成为你最大的竞争优势。"><a href="#10-如果上面提到的其他建议都对你无效，那么就请坚持第2点吧，因为它将成为你最大的竞争优势。" class="headerlink" title="10. 如果上面提到的其他建议都对你无效，那么就请坚持第2点吧，因为它将成为你最大的竞争优势。"></a>10. 如果上面提到的其他建议都对你无效，那么就请坚持第2点吧，因为它将成为你最大的竞争优势。</h3><h2 id="那些程序员们后知后觉的职涯经验"><a href="#那些程序员们后知后觉的职涯经验" class="headerlink" title="那些程序员们后知后觉的职涯经验"></a>那些程序员们后知后觉的职涯经验</h2><h3 id="1-你的薪酬与工作量无关"><a href="#1-你的薪酬与工作量无关" class="headerlink" title="1. 你的薪酬与工作量无关"></a>1. 你的薪酬与工作量无关</h3><p>换句话说你是否容易被取代。公司很容易找到一个和你差不多的应届毕业生，而那些对公司产品非常熟悉，并且起到关键作用的老员工，要想替代他们，公司所需要付出的代价及需要承担的风险就会高得多。所以，不妨摆正心态，正确认识到自己在公司中的位置，努力修炼内功，让自己变得越来越重要，相信你的薪资也会随之提升的。</p><h3 id="2-尽可能持续做一件事"><a href="#2-尽可能持续做一件事" class="headerlink" title="2. 尽可能持续做一件事"></a>2. 尽可能持续做一件事</h3><p>既然你对于公司的价值来自于你的不可替代性，那又该如何有效提升它呢？我的建议是尽可能持续做一件事。这既是指技术上的积累，也是指你能完整或较长时间参与同一个项目或开发一个产品。</p><p>技术深度及完整项目经验的重要性，如果你总是在跟随那些新出现的技术和框架，那你很难在某一项技术上达到理想的深度；同样，在一个公司里，如果你总是在更换项目，那你也很难提升自己的价值。参与10个项目，不如完整参与一个项目。持续做一件事是要你把每一件事做透、做好，而不是蜻蜓点水，浅尝辄止。</p><h3 id="3-唯一不变的就是变化本身"><a href="#3-唯一不变的就是变化本身" class="headerlink" title="3. 唯一不变的就是变化本身"></a>3. 唯一不变的就是变化本身</h3><p>作为程序员，我们又应该如何应对这些变化呢？我想说，你很难去改变所处的环境，或是阻挡那些变化的大趋势。你所能做的恰恰是培养自己持续学习的能力。</p><h3 id="4-你的声誉非常重要"><a href="#4-你的声誉非常重要" class="headerlink" title="4. 你的声誉非常重要"></a>4. 你的声誉非常重要</h3><p>除了那些经常挂在嘴边的诚实守信、踏实肯干等之外，有一点特别重要，那便是严谨。因为它往往是判断一名程序员是否具备优秀潜质的重要因素。严谨的程序员对于分配给自己的任务会认真理解，对于自己的产出会仔细检查，这些都能大大减少工作中的出错概率，给团队或公司中的其他人留下良好的印象。</p><h3 id="5-理解沟通的意义"><a href="#5-理解沟通的意义" class="headerlink" title="5. 理解沟通的意义"></a>5. 理解沟通的意义</h3><p>当我们没有对问题有深入理解的时候，我们很难写出正确的程序来，因此我们需要向用户虚心求教，去真正理解他们所希望解决的问题。</p><h3 id="6-你的右脑将是你成功的关键"><a href="#6-你的右脑将是你成功的关键" class="headerlink" title="6. 你的右脑将是你成功的关键"></a>6. 你的右脑将是你成功的关键</h3><p>谈到那些我们眼中非常成功的技术大牛、IT高管，都会出人意料地将一些非技术能力作为自己获得成功的关键。比如，编写文档或做PPT的能力、演讲的能力、说服他人的能力，等等。我虽然并不完全赞同最优秀的程序员不写代码这种观点，但我确信你的右脑将会是决定你能否成功的关键。</p><h3 id="7-不要轻易说简单和不可能"><a href="#7-不要轻易说简单和不可能" class="headerlink" title="7. 不要轻易说简单和不可能"></a>7. 不要轻易说简单和不可能</h3><p>年轻程序员们不应该轻易做出那些过于绝对的判断，应尽可能去使用科学的方法进行分析和论证，然后用不易被人误解的方式进行有效的表达，这样你提出的观点才能让大家感到信服。</p><h3 id="8-你不应该总是单打独斗"><a href="#8-你不应该总是单打独斗" class="headerlink" title="8. 你不应该总是单打独斗"></a>8. 你不应该总是单打独斗</h3><p>如果你真的希望做出一些具有影响力的东西，那么光靠个人是很难实现的。你需要和团队中不同角色的人进行合作，有时候你需要说服别人，有时候你则会被别人说服。</p><h3 id="9-让你的能力显而易见"><a href="#9-让你的能力显而易见" class="headerlink" title="9. 让你的能力显而易见"></a>9. 让你的能力显而易见</h3><p>那些优秀的程序员无时无刻不在体现他们的能力，从轻松地解决技术难题，到会议上提出被一致认可的解决方案，以及他们写出的那些优雅且完善的代码，这些都让他们显得与众不同，仿佛是天生的优秀程序员。但我想说，他们其实都是那些努力并使用了正确方法的人。程序员的能力来自于大量的编码实践，以及持续学习的能力和勤于思考的习惯。任何自作聪明，不懂装懂，以及投机取巧在明眼人看来都只会是东施效颦，显得如此微不足道。</p><h2 id="每个程序员都应该了解的一件事"><a href="#每个程序员都应该了解的一件事" class="headerlink" title="每个程序员都应该了解的一件事"></a>每个程序员都应该了解的一件事</h2><p>我曾经接触过一些IT高管及行业的技术大牛，当私下聊起他们是如何变得如此出类拔萃时，他们大多会以自嘲但又略带得意的语气来讲述他们的那些独门秘籍。</p><ul><li>我的文档写得特别好。</li><li>我的口才很好，总是能成功说服别人。</li><li>我的PPT做得非常棒，是公司里数一数二的。</li><li>我写过几篇很受欢迎的技术文章。</li><li>我热爱开源文化，并在社区里很有名气。</li><li>……</li></ul><p>我发现，这些普通人眼中的大神们很少会提及自己的技术有多牛，反而更多地把功劳归于那些看似与技术毫无关系的能力。大家千万别误以为他们只是一群华而不实，靠着一些小伎俩往上爬的小人。完全不是，而且我敢向你保证，他们中的每一个人在担任程序员或负责其他技术工作时，同样都有着非常出色的技术能力和优秀的工作表现。但为什么在他们眼中这些还不足以使他们达到现在的高度，反而是那些不起眼的写文档、做PPT、演讲等这些技能使他们能够在一次次竞争中胜出，并成为了我们中的佼佼者呢？</p><p>其实在我看来，他们所谓的这些秘籍，都可以归纳为一种能力，那就是<strong>自我营销</strong>。</p><p>一名程序员如果能够尽早意识到自我营销的重要性，并有意识地锻炼和运用这种能力，那将对你的事业产生有益的帮助。</p><p>那么对于程序员们来说，又有哪些能够提升自我营销能力的方法呢？下面便是我的一些建议。</p><h3 id="1-读与技术无关的书"><a href="#1-读与技术无关的书" class="headerlink" title="1. 读与技术无关的书"></a>1. 读与技术无关的书</h3><p>我建议只买一些经典的技术书籍来帮你打基础，然后从网上去学习一切新的东西。我尤其鼓励大家去读那些与技术无关的书籍。程序员不善于自我营销，其中一个重要原因是他们自身所掌握的知识体系太过于单一，很难跳出技术范畴与人交流，并引起别人的兴趣和认同。你可以读任何历史、经济、人文、艺术类的书籍，它们都能够帮助你丰富自己的知识和思想，使你变得更加全面和完善，而这反过来，又能帮助你建立信心。</p><h3 id="2-会写文档"><a href="#2-会写文档" class="headerlink" title="2. 会写文档"></a>2. 会写文档</h3><p>文档可能是你完成代码编写后一个最佳的展示机会。当代码实现了它的功能之后，就很少有人会再去看它，除非它出错了。但文档被阅读的概率却大得多。从一个文档中，我们可以看到关于作者的很多东西，思路是否缜密，逻辑性是否强，设计方案是否优秀，等等。可以说，文档质量的高低是衡量一名程序员是否优秀的重要标准之一。</p><h3 id="3-学会包装"><a href="#3-学会包装" class="headerlink" title="3. 学会包装"></a>3. 学会包装</h3><p>说到包装，人们往往会产生一种不好的感觉，把它与虚伪、假的东西联系在一起。其实，我所说的包装应该包含两层意思：</p><ul><li>知道什么是美的（优秀的）。</li><li>精心制作。</li></ul><p>作者举例一个普华永道的高级经理通过一个长达114页的非常精美的PPT而赢得了保监会关于偿付能力改革的会议。</p><p>在日常工作中，我经常发现身边的程序员很难写出美观整洁的文档或PPT来。这一方面与我们从小缺乏美学教育有关，而更重要的往往是他们并没有真正用心去制作它。其实，我们可以通过寻找一些优秀的文档示例来学习如何制作优秀的文档，这其实并不困难。知道什么是优秀的，然后像写你的代码一样用心去制作就行了。</p><h3 id="4-尝试多讲"><a href="#4-尝试多讲" class="headerlink" title="4. 尝试多讲"></a>4. 尝试多讲</h3><p>讲话一直是很多程序员的硬伤，当然这也曾是我的硬伤。根据我的经验，你需要跨过以下两个障碍：</p><ul><li>敢说。</li><li>让说的和你想的一致。</li></ul><h3 id="5-建立社会化联系"><a href="#5-建立社会化联系" class="headerlink" title="5.建立社会化联系"></a>5.建立社会化联系</h3><p>一个完全封闭的程序员一定不是一个优秀的程序员。优秀的程序员往往愿意并善于与他人交流，分享自己的经验和想法，并在交流中获得有益的东西。这样做有很多好处：</p><ul><li>通过这些社会化的活动能够使你的想法和技能更加完善。</li><li>能够使你建立权威，你的技术博客，在一些社区上的技术问题解答，以及你的开源项目等都会使人认为你是这方面的专家。</li><li>同样，你也可以获得他人的帮助，来解决棘手的难题。</li><li>你可以找到与你有相同兴趣的人，一起做有趣的事情。</li><li>你的社交网络将因此扩大，这意味着你所获得的机会将会更多。</li></ul><h2 id="程序员的烦恼"><a href="#程序员的烦恼" class="headerlink" title="程序员的烦恼"></a>程序员的烦恼</h2><h3 id="1-是否还应该留在一线城市"><a href="#1-是否还应该留在一线城市" class="headerlink" title="1. 是否还应该留在一线城市"></a>1. 是否还应该留在一线城市</h3><p>一切都能为你的生活赋予意义，并让你感到更加快乐的话，那你还是应该更坚定地留下，而非选择离开。</p><h3 id="2-小公司做的事情太繁杂了"><a href="#2-小公司做的事情太繁杂了" class="headerlink" title="2. 小公司做的事情太繁杂了"></a>2. 小公司做的事情太繁杂了</h3><p>时常会说“杂事不杂”，虽然看着被很多与技术无关的事务缠身，但它们对你来说同样具有意义。你从中可能获得沟通能力、管理能力、建立更广的人脉，在企业内部建立影响力，等等</p><h3 id="3-创业公司中的危机感"><a href="#3-创业公司中的危机感" class="headerlink" title="3. 创业公司中的危机感"></a>3. 创业公司中的危机感</h3><p>无论成功与否，经历一次完整的创业都将让你受益匪浅。你将学到很多在大公司仅仅做一颗螺丝钉所学不到的东西。虽然在此过程中，你一定会有挫败感、焦虑，但或许坚持一下就会看到曙光。</p><p>另外一点我想说的是，创业的过程将让你获得不同的眼光。创业大多是在一个新的领域中进行的，你不应仅仅专注于公司所使用的那些技术，而更需要通过深入理解这个新的领域，去获得不同的视角和眼光，因为它们也会在未来成为你的核心竞争力。</p><h3 id="4-技术单一，想学习更多"><a href="#4-技术单一，想学习更多" class="headerlink" title="4. 技术单一，想学习更多"></a>4. 技术单一，想学习更多</h3><p>我总是很鼓励身边的程序员们去涉猎不同的技术甚至领域，但前提是你必须首先对某一门技术做到精通。技术是需要深耕的，深入学习一门主流的开发技术，并不断提升编程思维，比对很多技术栈都浅尝辄止要好很多。因此，如果精力有限不妨先学好一门技术，你会发现之后再去学习其他技术会变得容易许多，因为它们之间往往都是相通的。</p><h3 id="5-我想自学编程，应该学哪一门语言？"><a href="#5-我想自学编程，应该学哪一门语言？" class="headerlink" title="5. 我想自学编程，应该学哪一门语言？"></a>5. 我想自学编程，应该学哪一门语言？</h3><p>如果你真的没有任何思路，只是希望你学的这门编程语言能够有用，我的建议是JavaScript，因为它看起来是唯一可能在未来所有领域内得到应用的编程语言，从我们的移动设备，到传统的Web应用，再到服务器端开发甚至是硬件编程，它几乎无处不在。</p><h3 id="6-大专学历，能进大公司吗？"><a href="#6-大专学历，能进大公司吗？" class="headerlink" title="6. 大专学历，能进大公司吗？"></a>6. 大专学历，能进大公司吗？</h3><p>全日制本科几乎成了所有内部职位的最低要求，所以学历上的缺失确实会成为你进入大公司的障碍。当然还是有例外的情况：</p><ul><li>通过内部员工的推荐。</li><li>通过外包公司进入后，再转为内部员工。</li><li>努力成为某一领域的专家，或者建立个人影响力。</li></ul><p>如果你还是一名大专在读学生，那么我希望你不要过早焦虑，尝试问问自己除了学历之外还有什么让你能够脱颖而出的东西？是否有自己的个人项目？是否为知名的开源项目贡献过代码，甚至只是参与编写文档？是否通过写博客阐述过自己的独到观点，并得到大家的认可？在哪家公司实习过？这些都可能抓住雇主的眼球，从而弥补你在学历上的不足。</p><h2 id="给年轻程序员的职涯建议"><a href="#给年轻程序员的职涯建议" class="headerlink" title="给年轻程序员的职涯建议"></a>给年轻程序员的职涯建议</h2><p>1.尽早确定你想做的事情。尽早确定自己想做的事情——你的职业目标，意味着你可以获得比其他人更多的时间去努力。<br>2.一万小时定律<br>3.提高工作效率。有以下两点建议：</p><ul><li>加快工作节奏</li><li>借助工具完成工作</li></ul><p>4.简明的沟通方式<br>5.持续学习<br>6.学会控制情绪<br>7.让最优秀的人围绕在你身边<br>8.善于归纳与表达<br>9.掌握英语<br>10.睡眠是你更强大</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="转载" scheme="https://mrleecn.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="职场" scheme="https://mrleecn.cn/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>时间是怎么浪费掉的</title>
    <link href="https://mrleecn.cn/2019/05/13/%E6%97%B6%E9%97%B4%E6%98%AF%E6%80%8E%E4%B9%88%E6%B5%AA%E8%B4%B9%E6%8E%89%E7%9A%84/"/>
    <id>https://mrleecn.cn/2019/05/13/时间是怎么浪费掉的/</id>
    <published>2019-05-13T14:06:50.000Z</published>
    <updated>2019-05-24T15:33:45.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="时间杀手"><a href="#时间杀手" class="headerlink" title="时间杀手"></a>时间杀手</h2><h2 id="最大的时间杀手–看电视"><a href="#最大的时间杀手–看电视" class="headerlink" title="最大的时间杀手–看电视"></a>最大的时间杀手–看电视</h2><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><p>2012年，尼尔森一份报告指出，两岁以上的美国人平均每周看电视直播的时间超过了34小时。这还不包括看录播节目。每周大概会花费<strong>40个小时</strong>看电视。</p><p><strong>看电视</strong>不仅浪费时间，还会以你察觉不到的方式<strong>影响你的认知</strong>。电视节目把所有的问题都“短路”了， 让你不经过自己的大脑的任何思考就把一切都安排好。从消费习惯到世界观，均受电视直接影响。电视看的越多，你越会放弃对自己思想和行为的控制。</p><h3 id="戒掉电视的方法"><a href="#戒掉电视的方法" class="headerlink" title="戒掉电视的方法"></a>戒掉电视的方法</h3><p>一下戒掉看电视有些难，但我们可以通过一些方法一点一点<strong>逐步</strong>戒掉电视。</p><ol><li><strong>跟踪自己看电视的时长，想想自己都看那些节目，每周看多久。</strong></li><li><p><strong>不看直播。</strong></p></li><li><p><strong>合理规划自己看电视的时间，并严格控制自己不超时。长期坚持，慢慢减少看电视的时间。</strong></p></li><li><p><strong>寻求其他事情来占用自己看电视时间。</strong></p></li></ol><h3 id="常见的时间杀手及解决办法"><a href="#常见的时间杀手及解决办法" class="headerlink" title="常见的时间杀手及解决办法"></a>常见的时间杀手及解决办法</h3><ol><li><p><strong>社交媒体和新闻网站</strong></p><p>采用<strong>批处理</strong>的方式，你可以在一天内集中一两次进行社交媒体活动或查看新闻网站。即使这样也绝不会错过任何有用的东西。</p></li><li><p><strong>不必要的会议</strong></p><p>不必要的会议不要去。可以通过邮件处理的会议，用邮件处理。</p></li><li><p><strong>玩电子游戏</strong></p><p>强制自己不要玩。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;时间杀手&quot;&gt;&lt;a href=&quot;#时间杀手&quot; class=&quot;headerlink&quot; title=&quot;时间杀手&quot;&gt;&lt;/a&gt;时间杀手&lt;/h2&gt;&lt;h2 id=&quot;最大的时间杀手–看电视&quot;&gt;&lt;a href=&quot;#最大的时间杀手–看电视&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="软技能" scheme="https://mrleecn.cn/tags/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
      <category term="读书笔记" scheme="https://mrleecn.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>十步学习法</title>
    <link href="https://mrleecn.cn/2019/04/28/%E5%8D%81%E6%AD%A5%E5%AD%A6%E4%B9%A0%E6%B3%95/"/>
    <id>https://mrleecn.cn/2019/04/28/十步学习法/</id>
    <published>2019-04-28T13:24:35.000Z</published>
    <updated>2019-05-24T15:33:45.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十步学习法"><a href="#十步学习法" class="headerlink" title="十步学习法"></a>十步学习法</h1><p>为了能够掌握一门技术，需要了解以下三个要点：</p><ul><li><p><strong>如何开始</strong> ：要想开始学习，现在需要掌握哪些基础知识。</p></li><li><p><strong>学科范围</strong> ：我现在学的东西有多宏大？我应该怎么怎样做？在开始阶段，不需要了解每个细节，但是需要对该学科的大概轮廓有所了解。</p></li><li><p><strong>基础知识</strong> ：不止在开始阶段，要想使用一项特定的技术，需要了解基本的用户案例和最常见的问题，也需要知道字节学的哪20%能满足80%的日常应用。</p></li></ul><h2 id="十步学习法体系"><a href="#十步学习法体系" class="headerlink" title="十步学习法体系"></a>十步学习法体系</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><ol><li><p>对自己要学的内容有个基本了解-了解自己不知道什么足矣。</p></li><li><p>利用这些信息勾勒出学习的范围，以及学成后又会获得什么。</p></li><li><p>利用上述知识，寻找各类资源，帮助自己学习。</p></li><li><p>制定自己学习计划，列出需要学习的课程，筛选学习材料，只保留能帮助自己达成目标的内容。</p></li></ol><h3 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h3><ul><li><p><strong>第一步：了解全局</strong></p><p>在深入研究某个主题之前至少要对其有所了解。这样才能弄清自己到底要学什么，才能找到最好的学习方法。</p></li></ul><ul><li><p><strong>第二步：确定范围</strong></p><p><strong>明确自己的学习范围</strong>。运用上一步中获得的信息，让自己的关注点落脚到更小也更可控的范围。抵制该学习主题下的不同子主题的诱惑，尽可能专注于自己的学习范围。</p></li></ul><ul><li><p><strong>第三步：定义目标</strong></p><p>形成一份<strong>简明清晰的陈述</strong>，勾勒出你勤奋学习后的<strong>成功图景</strong>。确保其中包括具体的<strong>成功标准</strong>，从而能充分评估自己是否达到了学习目标。</p></li></ul><ul><li><p><strong>第四步：寻找资源</strong></p><p>通过多种途径，尽可能多的收集与自己所选主题相关的资源，此时无需考虑这些资源的质量。</p></li></ul><ul><li><p><strong>第五步：创建学习计划</strong></p><p>将自己的学习路径看作是自己写书时的<strong>大纲</strong>，结合第四步寻找到的图书目录，制定自己的学习计划。</p></li></ul><ul><li><p><strong>第六步：筛选资源</strong></p><p>把第四步中收集到的资源全部浏览一遍，找出那些内容能够覆盖到你的学习计划，结合评论，找出品质最高的资源。</p></li></ul><ul><li><p><strong>第七步：开始学习，浅尝辄止</strong></p><p>广度优先，获取足够多的与所学主题相关的信息。从而能让你开始学习，并在下一步计划中动手操作。</p></li></ul><ul><li><p><strong>第八步：动手操作，边学边玩</strong></p><p>无需提前了解全部内容，首先要做的就是<strong>亲自操作</strong>和<strong>亲身体验</strong>，在实践中学习。</p></li></ul><ul><li><p><strong>第九步：全面掌握，学以致用</strong></p><p>有效利用自己选择的资料，通过<strong>阅读文字</strong>、<strong>观看视频</strong>、<strong>与人交流</strong>等方式，沉浸在学习资料中，对知识深度挖掘。并试着把自己正在学习的内容和最终目标相关联。</p></li></ul><ul><li><p><strong>第十步：乐为人师，融会贯通</strong></p><p><strong>走出自己的舒适区，将自己学到的知识交给别人。</strong>在这一过程中查缺补漏，切实剖析并理解自己所学知识，将其内化到自己思想。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;十步学习法&quot;&gt;&lt;a href=&quot;#十步学习法&quot; class=&quot;headerlink&quot; title=&quot;十步学习法&quot;&gt;&lt;/a&gt;十步学习法&lt;/h1&gt;&lt;p&gt;为了能够掌握一门技术，需要了解以下三个要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;如何开始&lt;/stron
      
    
    </summary>
    
    
      <category term="软技能" scheme="https://mrleecn.cn/tags/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
      <category term="读书笔记" scheme="https://mrleecn.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
